{"metadata":"{\"compiler\":{\"version\":\"0.8.13\"},\"sources\":{\"contracts/ScheduleTestHarness.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport {ScheduleUtils, Schedule} from \\\"./ScheduleUtils.sol\\\";\\n\\n/**\\n * @dev Testbed contract for testing ScheduleUtils library.\\n *\\n * Not intended for deployment in productionish environments.\\n */\\n\\ncontract ScheduleTestHarness {\\n  using ScheduleUtils for Schedule;\\n\\n  mapping(uint256 => Schedule) private _schedules;\\n  uint256 private _scheduleCount;\\n\\n  event ScheduleCreated(\\n    uint256 id,\\n    uint256 startTime,\\n    uint256 endTime,\\n    uint256 totalAmount\\n  );\\n  event CliffAdded(uint256 id, uint256 time, uint256 amount);\\n  event ScheduleTruncated(uint256 id, uint256 balance);\\n\\n  function create(\\n    uint256 startTime,\\n    uint256 endTime,\\n    uint256 totalAmount\\n  ) public {\\n    Schedule storage schedule = _schedules[_scheduleCount];\\n    _scheduleCount += 1;\\n    schedule.startTime = startTime;\\n    schedule.endTime = endTime;\\n    schedule.totalAmount = totalAmount;\\n    emit ScheduleCreated(_scheduleCount - 1, startTime, endTime, totalAmount);\\n  }\\n\\n  function addCliff(\\n    uint256 scheduleId,\\n    uint256 time,\\n    uint256 amount\\n  ) public {\\n    _schedules[scheduleId].addCliff(time, amount);\\n    emit CliffAdded(_schedules[scheduleId].cliffCount - 1, time, amount);\\n  }\\n\\n  function truncateScheduleAmount(uint256 scheduleId, uint256 atTime) public {\\n    uint256 currentlyAvailable = availableAmount(scheduleId, atTime);\\n    _schedules[scheduleId].totalAmount = currentlyAvailable;\\n    emit ScheduleTruncated(scheduleId, currentlyAvailable);\\n  }\\n\\n  function availableAmount(uint256 scheduleId, uint256 atTime)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return _schedules[scheduleId].availableAmount(atTime);\\n  }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"},\"contracts/ScheduleUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\n\\nstruct Cliff {\\n  uint256 time;\\n  uint256 amount;\\n}\\n\\nstruct Schedule {\\n  uint256 startTime;\\n  uint256 endTime;\\n  uint256 totalAmount;\\n  mapping(uint256 => Cliff) cliffs;\\n  uint256 cliffCount;\\n  uint256 totalCliffAmount;\\n}\\n\\n/**\\n * @dev Library encapsulating the logic around timed release schedules with cliffs.\\n *\\n * Supports an arbitrary number of stepwise cliff releases beyond which the remaining\\n * amount is released linearly from the time of the final cliff to the end date.\\n *\\n * All time parameters are in unixtime for ease of comparison with block.timestamp\\n * although all methods on ScheduleUtils take *atTime* as a parameter and do not\\n * directly reason about the current block timestamp.\\n *\\n * See also {ScheduleTestHarness.sol} for a simple use of this library\\n * for unit testing purposes.\\n *\\n * NOTE: All methods are internal so this library gets inlined into the consuming\\n * contract and does not need to be deployed separately.\\n *\\n * Designed to be used i.e.:\\n *\\n * ```\\n *  using ScheduleUtils for Schedule;\\n *\\n *  mapping(address => Schedule) schedules = Schedules;\\n *  Schedule s = schedules[account];\\n *  s.startTime = 1644436100;\\n *  s.endTime = 1645436100;\\n *  s.totalAmount = 1000000;\\n *  s.addCliff(1644436200, 50000);\\n *  s.amountAvailable(1644436200);\\n * ```\\n *\\n */\\nlibrary ScheduleUtils {\\n  /**\\n   * @dev Adds a cliff defined by *time* and *amount* to *schedule*\\n   *\\n   * *time* must be >= any existing cliff, >= schedule.startTime and <= schedule.endTime\\n   * *amount* must be <= (schedule.totalAmount - total of existing cliffs)\\n   */\\n  function addCliff(\\n    Schedule storage schedule,\\n    uint256 time,\\n    uint256 amount\\n  ) internal {\\n    uint256 cliffCount = schedule.cliffCount;\\n    if (schedule.cliffCount == 0) {\\n      require(\\n        time >= schedule.startTime,\\n        \\\"ScheduleUtils: Cliff before schedule start\\\"\\n      );\\n    } else {\\n      require(\\n        time >= schedule.cliffs[cliffCount - 1].time,\\n        \\\"ScheduleUtils: Cliffs not chronological\\\"\\n      );\\n    }\\n    require(\\n      time <= schedule.endTime,\\n      \\\"ScheduleUtils: Cliffs cannot end after schedule\\\"\\n    );\\n    require(\\n      schedule.totalCliffAmount + amount <= schedule.totalAmount,\\n      \\\"ScheduleUtils: Cliff amounts exceed total\\\"\\n    );\\n    Cliff storage cliff = schedule.cliffs[cliffCount];\\n    cliff.time = time;\\n    cliff.amount = amount;\\n    schedule.cliffCount += 1;\\n    schedule.totalCliffAmount += amount;\\n  }\\n\\n  /**\\n   * @dev The total of unlocked cliff amounts in *schedule* at time *atTime*\\n   */\\n  function cliffAmountsAvailable(Schedule storage schedule, uint256 atTime)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 available = 0;\\n    uint256 cliffCount = schedule.cliffCount;\\n    for (uint256 i = 0; i < cliffCount; i++) {\\n      if (atTime >= schedule.cliffs[i].time) {\\n        available += schedule.cliffs[i].amount;\\n      }\\n    }\\n    return MathUpgradeable.min(schedule.totalAmount, available);\\n  }\\n\\n  /**\\n   * @dev The total amount of the linear (post-cliff) release available at *atTime*\\n   *\\n   * Will always be zero prior to the final cliff time and then increases linearly\\n   * util *schedule.endTime*.\\n   */\\n  function linearReleaseAmountAvailable(\\n    Schedule storage schedule,\\n    uint256 atTime\\n  ) internal view returns (uint256) {\\n    uint256 rampTotalAmount;\\n    // could happen if unvested tokens were revoked\\n    if (schedule.totalAmount >= schedule.totalCliffAmount) {\\n      rampTotalAmount = schedule.totalAmount - schedule.totalCliffAmount;\\n    } // else 0\\n    if (atTime >= schedule.endTime) {\\n      return rampTotalAmount;\\n    }\\n    uint256 rampStartTime = schedule.startTime;\\n    if (schedule.cliffCount > 0) {\\n      rampStartTime = schedule.cliffs[schedule.cliffCount - 1].time;\\n    }\\n    uint256 rampTotalTime = schedule.endTime - rampStartTime;\\n    return\\n      atTime < rampStartTime\\n        ? 0\\n        : (rampTotalAmount * (atTime - rampStartTime)) / rampTotalTime;\\n  }\\n\\n  /**\\n   * @dev The total amount available at *atTime*\\n   *\\n   * Will always be zero prior to *schedule.startTime* and *amount*\\n   * after *schedule.endTime*.\\n   *\\n   * Equivalent to cliffAmountsAvailable + linearReleaseAmountAvailable.\\n   */\\n  function availableAmount(Schedule storage schedule, uint256 atTime)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return\\n      cliffAmountsAvailable(schedule, atTime) +\\n      linearReleaseAmountAvailable(schedule, atTime);\\n  }\\n}\\n\"}}}","address":"0x83207e4a2caC1015bda1A794b57F708C4360924e","bytecode":"0x608060405234801561001057600080fd5b506106ff806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80633f353fcf146100515780635174b562146100665780635899ea1314610079578063c97fe94b1461009e575b600080fd5b61006461005f3660046105dc565b6100b1565b005b6100646100743660046105fe565b610112565b61008c6100873660046105dc565b610186565b60405190815260200160405180910390f35b6100646100ac3660046105fe565b6101a7565b60006100bd8383610186565b6000848152602081815260409182902060020183905581518681529081018390529192507f6114e26f4333414f417da57f7a415474fd2df0730648f4748b8eb9a2d14495aa91015b60405180910390a1505050565b600083815260208190526040902061012b908383610238565b6000838152602081905260409020600401547fe3b8293c4ee6cdc59f5c1690803c6c1440038f43705dc0b37d382be2ae3d2cdb9061016b90600190610640565b60408051918252602082018590528101839052606001610105565b600082815260208190526040812061019e9083610471565b90505b92915050565b60018054600081815260208190526040812092918291906101c9908390610657565b909155505083815560018082018490556002820183905580547fbd7880573155705535dce3194981f4b25e22063a5619ea279e73b43b348316709161020d91610640565b604080519182526020820187905281018590526060810184905260800160405180910390a150505050565b600483015460008190036102b45783548310156102af5760405162461bcd60e51b815260206004820152602a60248201527f5363686564756c655574696c733a20436c696666206265666f72652073636865604482015269191d5b19481cdd185c9d60b21b60648201526084015b60405180910390fd5b610336565b6003840160006102c5600184610640565b8152602001908152602001600020600001548310156103365760405162461bcd60e51b815260206004820152602760248201527f5363686564756c655574696c733a20436c69666673206e6f74206368726f6e6f6044820152661b1bd9da58d85b60ca1b60648201526084016102a6565b83600101548311156103a25760405162461bcd60e51b815260206004820152602f60248201527f5363686564756c655574696c733a20436c696666732063616e6e6f7420656e6460448201526e206166746572207363686564756c6560881b60648201526084016102a6565b83600201548285600501546103b79190610657565b11156104175760405162461bcd60e51b815260206004820152602960248201527f5363686564756c655574696c733a20436c69666620616d6f756e747320657863604482015268195959081d1bdd185b60ba1b60648201526084016102a6565b6000818152600385016020526040812084815560018082018590556004870180549293919290919061044a908490610657565b92505081905550828560050160008282546104659190610657565b90915550505050505050565b600061047d8383610491565b6104878484610550565b61019e9190610657565b60008083600501548460020154106104ba57836005015484600201546104b79190610640565b90505b836001015483106104cc5790506101a1565b835460048501541561050457846003016000600187600401546104ef9190610640565b81526020019081526020016000206000015490505b60008186600101546105169190610640565b9050818510610543578061052a8387610640565b610534908561066f565b61053e919061068e565b610546565b60005b9695505050505050565b60048201546000908190815b818110156105ae576000818152600387016020526040902054851061059c5760008181526003870160205260409020600101546105999084610657565b92505b806105a6816106b0565b91505061055c565b506105bd8560020154836105c6565b95945050505050565b60008183106105d5578161019e565b5090919050565b600080604083850312156105ef57600080fd5b50508035926020909101359150565b60008060006060848603121561061357600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156106525761065261062a565b500390565b6000821982111561066a5761066a61062a565b500190565b60008160001904831182151516156106895761068961062a565b500290565b6000826106ab57634e487b7160e01b600052601260045260246000fd5b500490565b6000600182016106c2576106c261062a565b506001019056fea26469706673582212203541406b48de4144089dc5db1ebc3850547effa886ffae368428073ce31f697764736f6c634300080d0033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80633f353fcf146100515780635174b562146100665780635899ea1314610079578063c97fe94b1461009e575b600080fd5b61006461005f3660046105dc565b6100b1565b005b6100646100743660046105fe565b610112565b61008c6100873660046105dc565b610186565b60405190815260200160405180910390f35b6100646100ac3660046105fe565b6101a7565b60006100bd8383610186565b6000848152602081815260409182902060020183905581518681529081018390529192507f6114e26f4333414f417da57f7a415474fd2df0730648f4748b8eb9a2d14495aa91015b60405180910390a1505050565b600083815260208190526040902061012b908383610238565b6000838152602081905260409020600401547fe3b8293c4ee6cdc59f5c1690803c6c1440038f43705dc0b37d382be2ae3d2cdb9061016b90600190610640565b60408051918252602082018590528101839052606001610105565b600082815260208190526040812061019e9083610471565b90505b92915050565b60018054600081815260208190526040812092918291906101c9908390610657565b909155505083815560018082018490556002820183905580547fbd7880573155705535dce3194981f4b25e22063a5619ea279e73b43b348316709161020d91610640565b604080519182526020820187905281018590526060810184905260800160405180910390a150505050565b600483015460008190036102b45783548310156102af5760405162461bcd60e51b815260206004820152602a60248201527f5363686564756c655574696c733a20436c696666206265666f72652073636865604482015269191d5b19481cdd185c9d60b21b60648201526084015b60405180910390fd5b610336565b6003840160006102c5600184610640565b8152602001908152602001600020600001548310156103365760405162461bcd60e51b815260206004820152602760248201527f5363686564756c655574696c733a20436c69666673206e6f74206368726f6e6f6044820152661b1bd9da58d85b60ca1b60648201526084016102a6565b83600101548311156103a25760405162461bcd60e51b815260206004820152602f60248201527f5363686564756c655574696c733a20436c696666732063616e6e6f7420656e6460448201526e206166746572207363686564756c6560881b60648201526084016102a6565b83600201548285600501546103b79190610657565b11156104175760405162461bcd60e51b815260206004820152602960248201527f5363686564756c655574696c733a20436c69666620616d6f756e747320657863604482015268195959081d1bdd185b60ba1b60648201526084016102a6565b6000818152600385016020526040812084815560018082018590556004870180549293919290919061044a908490610657565b92505081905550828560050160008282546104659190610657565b90915550505050505050565b600061047d8383610491565b6104878484610550565b61019e9190610657565b60008083600501548460020154106104ba57836005015484600201546104b79190610640565b90505b836001015483106104cc5790506101a1565b835460048501541561050457846003016000600187600401546104ef9190610640565b81526020019081526020016000206000015490505b60008186600101546105169190610640565b9050818510610543578061052a8387610640565b610534908561066f565b61053e919061068e565b610546565b60005b9695505050505050565b60048201546000908190815b818110156105ae576000818152600387016020526040902054851061059c5760008181526003870160205260409020600101546105999084610657565b92505b806105a6816106b0565b91505061055c565b506105bd8560020154836105c6565b95945050505050565b60008183106105d5578161019e565b5090919050565b600080604083850312156105ef57600080fd5b50508035926020909101359150565b60008060006060848603121561061357600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156106525761065261062a565b500390565b6000821982111561066a5761066a61062a565b500190565b60008160001904831182151516156106895761068961062a565b500290565b6000826106ab57634e487b7160e01b600052601260045260246000fd5b500490565b6000600182016106c2576106c261062a565b506001019056fea26469706673582212203541406b48de4144089dc5db1ebc3850547effa886ffae368428073ce31f697764736f6c634300080d0033","abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"time","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"CliffAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"startTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"endTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalAmount","type":"uint256"}],"name":"ScheduleCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"balance","type":"uint256"}],"name":"ScheduleTruncated","type":"event"},{"inputs":[{"internalType":"uint256","name":"scheduleId","type":"uint256"},{"internalType":"uint256","name":"time","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"addCliff","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"scheduleId","type":"uint256"},{"internalType":"uint256","name":"atTime","type":"uint256"}],"name":"availableAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"},{"internalType":"uint256","name":"totalAmount","type":"uint256"}],"name":"create","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"scheduleId","type":"uint256"},{"internalType":"uint256","name":"atTime","type":"uint256"}],"name":"truncateScheduleAmount","outputs":[],"stateMutability":"nonpayable","type":"function"}]}