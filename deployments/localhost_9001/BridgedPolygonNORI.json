{"metadata":"{\"compiler\":{\"version\":\"0.8.13\"},\"sources\":{\"contracts/BridgedPolygonNORI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"./NORI.sol\\\";\\n\\ncontract BridgedPolygonNORI is NORI {\\n  bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR_ROLE\\\");\\n\\n  /**\\n   * @notice called when token is deposited on root chain\\n   * @dev Should be callable only by ChildChainManager\\n   * Should handle deposit by minting the required amount for user\\n   * Make sure minting is done only by this function\\n   * @param user user address for whom deposit is being done\\n   * @param depositData abi encoded amount\\n   */\\n  function deposit(address user, bytes calldata depositData)\\n    external\\n    onlyRole(DEPOSITOR_ROLE)\\n  {\\n    uint256 amount = abi.decode(depositData, (uint256));\\n    _mint(user, amount, depositData, \\\"\\\");\\n  }\\n\\n  /**\\n   * @notice called when user wants to withdraw tokens back to root chain\\n   * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\\n   * @param amount amount of tokens to withdraw\\n   */\\n  function withdraw(uint256 amount) external {\\n    _burn(_msgSender(), amount, \\\"\\\", \\\"\\\");\\n  }\\n\\n  /**\\n   * @notice initializes the BridgedPolygonNORI contract\\n   */\\n  function initialize(address childChainManagerProxy) public initializer {\\n    __BridgedPolygonNORI_init(childChainManagerProxy);\\n  }\\n\\n  /**\\n   * @notice overrides the NORI initializer so that it reverts and is never initialized with a call to the mint function\\n   */\\n  function initialize() public override initializer {\\n    revert(\\\"BridgedPolygonNORI: disallowed\\\");\\n  }\\n\\n  /**\\n   * @notice Initializer variant that embeds the linearized calls to all parent initializers.\\n   * @dev Follows the multiple inheritance initializer rules defined [here](\\n   * https://docs.openzeppelin.com/contracts/3.x/upgradeable#multiple-inheritance). As a consequence,\\n   * calling two of these init functions can potentially initialize the same contract twice.\\n   */\\n  function __BridgedPolygonNORI_init(\\n    // solhint-disable-previous-line func-name-mixedcase\\n    address childChainManagerProxy\\n  ) internal onlyInitializing {\\n    __Context_init_unchained();\\n    __ERC165_init_unchained();\\n    __AccessControl_init_unchained();\\n    __AccessControlEnumerable_init_unchained();\\n    __Pausable_init_unchained();\\n    __ERC777PresetPausablePermissioned_init_unchained();\\n    __ERC777_init_unchained(\\\"NORI\\\", \\\"NORI\\\", new address[](0));\\n    __NORI_init_unchained();\\n    __BridgedPolygonNORI_init_unchained(childChainManagerProxy);\\n  }\\n\\n  /**\\n   * @notice Initializer variant that does **not** embed linearized calls to any parent initializers.\\n   * @dev Follows the multiple inheritance initializer rules defined [here](\\n   * https://docs.openzeppelin.com/contracts/3.x/upgradeable#multiple-inheritance). As a consequence,\\n   * calling two of these init functions can potentially initialize the same contract twice.\\n   */\\n  function __BridgedPolygonNORI_init_unchained(\\n    // solhint-disable-previous-line func-name-mixedcase\\n    address childChainManagerProxy\\n  ) internal onlyInitializing {\\n    _grantRole(DEPOSITOR_ROLE, childChainManagerProxy);\\n  }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/token/ERC777/IERC777Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/token/ERC777/IERC777RecipientUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Recipient.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777RecipientUpgradeable {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/token/ERC777/IERC777SenderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Sender.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\\n *\\n * {IERC777} Token holders can be notified of operations performed on their\\n * tokens by having a contract implement this interface (contract holders can be\\n * their own implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777SenderUpgradeable {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\\n     * is conveyed by `to` being the zero address or not.\\n     *\\n     * This call occurs _before_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820RegistryUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC1820Registry.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820RegistryUpgradeable {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(\\n        address account,\\n        bytes32 _interfaceHash,\\n        address implementer\\n    ) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     * @param account Address of the contract for which to update the cache.\\n     * @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not.\\n     * If the result is not cached a direct lookup on the contract address is performed.\\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     * {updateERC165Cache} with the contract address.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/token/ERC777/ERC777Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC777/ERC777.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC777Upgradeable.sol\\\";\\nimport \\\"./IERC777RecipientUpgradeable.sol\\\";\\nimport \\\"./IERC777SenderUpgradeable.sol\\\";\\nimport \\\"../ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/IERC1820RegistryUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC777} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * Support for ERC20 is included in this contract, as specified by the EIP: both\\n * the ERC777 and ERC20 interfaces can be safely used when interacting with it.\\n * Both {IERC777-Sent} and {IERC20-Transfer} events are emitted on token\\n * movements.\\n *\\n * Additionally, the {IERC777-granularity} value is hard-coded to `1`, meaning that there\\n * are no special restrictions in the amount of tokens that created, moved, or\\n * destroyed. This makes integration with ERC20 applications seamless.\\n */\\ncontract ERC777Upgradeable is Initializable, ContextUpgradeable, IERC777Upgradeable, IERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    IERC1820RegistryUpgradeable internal constant _ERC1820_REGISTRY = IERC1820RegistryUpgradeable(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n    mapping(address => uint256) private _balances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    bytes32 private constant _TOKENS_SENDER_INTERFACE_HASH = keccak256(\\\"ERC777TokensSender\\\");\\n    bytes32 private constant _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\\\"ERC777TokensRecipient\\\");\\n\\n    // This isn't ever read from - it's only used to respond to the defaultOperators query.\\n    address[] private _defaultOperatorsArray;\\n\\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\\n    mapping(address => bool) private _defaultOperators;\\n\\n    // For each account, a mapping of its operators and revoked default operators.\\n    mapping(address => mapping(address => bool)) private _operators;\\n    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\\n\\n    // ERC20-allowances\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    /**\\n     * @dev `defaultOperators` may be an empty array.\\n     */\\n    function __ERC777_init(\\n        string memory name_,\\n        string memory symbol_,\\n        address[] memory defaultOperators_\\n    ) internal onlyInitializing {\\n        __ERC777_init_unchained(name_, symbol_, defaultOperators_);\\n    }\\n\\n    function __ERC777_init_unchained(\\n        string memory name_,\\n        string memory symbol_,\\n        address[] memory defaultOperators_\\n    ) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        _defaultOperatorsArray = defaultOperators_;\\n        for (uint256 i = 0; i < defaultOperators_.length; i++) {\\n            _defaultOperators[defaultOperators_[i]] = true;\\n        }\\n\\n        // register interfaces\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC777Token\\\"), address(this));\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC20Token\\\"), address(this));\\n    }\\n\\n    /**\\n     * @dev See {IERC777-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-decimals}.\\n     *\\n     * Always returns 18, as per the\\n     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\\n     */\\n    function decimals() public pure virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-granularity}.\\n     *\\n     * This implementation always returns `1`.\\n     */\\n    function granularity() public view virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override(IERC20Upgradeable, IERC777Upgradeable) returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\\n     */\\n    function balanceOf(address tokenHolder) public view virtual override(IERC20Upgradeable, IERC777Upgradeable) returns (uint256) {\\n        return _balances[tokenHolder];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-send}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function send(\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        _send(_msgSender(), recipient, amount, data, \\\"\\\", true);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\\n     * interface if it is a contract.\\n     *\\n     * Also emits a {Sent} event.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        require(recipient != address(0), \\\"ERC777: transfer to the zero address\\\");\\n\\n        address from = _msgSender();\\n\\n        _callTokensToSend(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _move(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _callTokensReceived(from, from, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-burn}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function burn(uint256 amount, bytes memory data) public virtual override {\\n        _burn(_msgSender(), amount, data, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC777-isOperatorFor}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) public view virtual override returns (bool) {\\n        return\\n            operator == tokenHolder ||\\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\\n            _operators[tokenHolder][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-authorizeOperator}.\\n     */\\n    function authorizeOperator(address operator) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC777: authorizing self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            delete _revokedDefaultOperators[_msgSender()][operator];\\n        } else {\\n            _operators[_msgSender()][operator] = true;\\n        }\\n\\n        emit AuthorizedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-revokeOperator}.\\n     */\\n    function revokeOperator(address operator) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC777: revoking self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            _revokedDefaultOperators[_msgSender()][operator] = true;\\n        } else {\\n            delete _operators[_msgSender()][operator];\\n        }\\n\\n        emit RevokedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-defaultOperators}.\\n     */\\n    function defaultOperators() public view virtual override returns (address[] memory) {\\n        return _defaultOperatorsArray;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorSend}.\\n     *\\n     * Emits {Sent} and {IERC20-Transfer} events.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    ) public virtual override {\\n        require(isOperatorFor(_msgSender(), sender), \\\"ERC777: caller is not an operator for holder\\\");\\n        _send(sender, recipient, amount, data, operatorData, true);\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorBurn}.\\n     *\\n     * Emits {Burned} and {IERC20-Transfer} events.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    ) public virtual override {\\n        require(isOperatorFor(_msgSender(), account), \\\"ERC777: caller is not an operator for holder\\\");\\n        _burn(account, amount, data, operatorData);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     *\\n     * Note that operator and allowance concepts are orthogonal: operators may\\n     * not have allowance, and accounts with allowance may not be operators\\n     * themselves.\\n     */\\n    function allowance(address holder, address spender) public view virtual override returns (uint256) {\\n        return _allowances[holder][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function approve(address spender, uint256 value) public virtual override returns (bool) {\\n        address holder = _msgSender();\\n        _approve(holder, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Note that operator and allowance concepts are orthogonal: operators cannot\\n     * call `transferFrom` (unless they have allowance), and accounts with\\n     * allowance cannot call `operatorSend` (unless they are operators).\\n     *\\n     * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\\n     */\\n    function transferFrom(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        require(recipient != address(0), \\\"ERC777: transfer to the zero address\\\");\\n        require(holder != address(0), \\\"ERC777: transfer from the zero address\\\");\\n\\n        address spender = _msgSender();\\n\\n        _callTokensToSend(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _spendAllowance(holder, spender, amount);\\n\\n        _move(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _callTokensReceived(spender, holder, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `operator`, `data` and `operatorData`.\\n     *\\n     * See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits {Minted} and {IERC20-Transfer} events.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    ) internal virtual {\\n        _mint(account, amount, userData, operatorData, true);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * If `requireReceptionAck` is set to true, and if a send hook is\\n     * registered for `account`, the corresponding function will be called with\\n     * `operator`, `data` and `operatorData`.\\n     *\\n     * See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits {Minted} and {IERC20-Transfer} events.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC777: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, amount);\\n\\n        // Update state variables\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n\\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, requireReceptionAck);\\n\\n        emit Minted(operator, account, amount, userData, operatorData);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Send tokens\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _send(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC777: send from the zero address\\\");\\n        require(to != address(0), \\\"ERC777: send to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\\n\\n        _move(operator, from, to, amount, userData, operatorData);\\n\\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\\n    }\\n\\n    /**\\n     * @dev Burn tokens\\n     * @param from address token holder address\\n     * @param amount uint256 amount of tokens to burn\\n     * @param data bytes extra information provided by the token holder\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _burn(\\n        address from,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC777: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\\n\\n        _beforeTokenTransfer(operator, from, address(0), amount);\\n\\n        // Update state variables\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC777: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Burned(operator, from, amount, data, operatorData);\\n        emit Transfer(from, address(0), amount);\\n    }\\n\\n    function _move(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    ) private {\\n        _beforeTokenTransfer(operator, from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC777: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Sent(operator, from, to, amount, userData, operatorData);\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_approve}.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function _approve(\\n        address holder,\\n        address spender,\\n        uint256 value\\n    ) internal virtual {\\n        require(holder != address(0), \\\"ERC777: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC777: approve to the zero address\\\");\\n\\n        _allowances[holder][spender] = value;\\n        emit Approval(holder, spender, value);\\n    }\\n\\n    /**\\n     * @dev Call from.tokensToSend() if the interface is registered\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _callTokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    ) private {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777SenderUpgradeable(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\\n        }\\n    }\\n\\n    /**\\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\\n     * tokensReceived() was not registered for the recipient\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _callTokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    ) private {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777RecipientUpgradeable(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\\n        } else if (requireReceptionAck) {\\n            require(!to.isContract(), \\\"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC777: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes\\n     * calls to {send}, {transfer}, {operatorSend}, minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[41] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"},\"contracts/ERC777PresetPausablePermissioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC777/ERC777Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\n\\ncontract ERC777PresetPausablePermissioned is\\n  ERC777Upgradeable,\\n  PausableUpgradeable,\\n  AccessControlEnumerableUpgradeable\\n{\\n  /**\\n   * @notice Role conferring the ability to pause and unpause mutable functions of the contract\\n   */\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n  /**\\n   * @notice Reserved storage slot for upgradeability\\n   *\\n   * @dev This empty reserved space is put in place to allow future versions to add new variables without shifting\\n   * down storage in the inheritance chain. See more [here](\\n   * https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)\\n   */\\n  uint256[50] private __gap;\\n\\n  /**\\n   * @notice An event emitted when a batch of transfers are bundled into a single transaction\\n   */\\n  event SentBatch(\\n    address indexed from,\\n    address[] recipients,\\n    uint256[] amounts,\\n    bytes[] userData,\\n    bytes[] operatorData,\\n    bool[] requireReceptionAck\\n  );\\n\\n  /**\\n   * @notice Batches multiple transfers into a single transaction\\n   *\\n   * @param recipients address[] list of recipient addresses\\n   * @param amounts uint256[] list of amounts to transfer\\n   * @param userData bytes[] list of extra information provided by the token holder (if any)\\n   * @param operatorData bytes[] list of extra information provided by the operator (if any)\\n   * @param requireReceptionAck list of requirements (if true, contract recipients are required to implement\\n   * ERC777TokensRecipient)\\n   *\\n   * Emits a SendBatch event.\\n   *\\n   * ##### Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  function batchSend(\\n    address[] memory recipients,\\n    uint256[] memory amounts,\\n    bytes[] memory userData,\\n    bytes[] memory operatorData,\\n    bool[] memory requireReceptionAck\\n  ) public {\\n    require(\\n      recipients.length == amounts.length,\\n      \\\"ERC777PresetPausablePermissioned: recipient and amount length mismatch\\\"\\n    );\\n    require(\\n      amounts.length == userData.length,\\n      \\\"ERC777PresetPausablePermissioned: amounts and userData length mismatch\\\"\\n    );\\n    require(\\n      userData.length == operatorData.length,\\n      \\\"ERC777PresetPausablePermissioned: userData and operatorData length mismatch\\\"\\n    );\\n    require(\\n      operatorData.length == requireReceptionAck.length,\\n      \\\"ERC777PresetPausablePermissioned: operatorData and requireReceptionAck length mismatch\\\"\\n    );\\n    for (uint256 i = 0; i < recipients.length; i++) {\\n      _send(\\n        _msgSender(),\\n        recipients[i],\\n        amounts[i],\\n        userData[i],\\n        operatorData[i],\\n        requireReceptionAck[i]\\n      );\\n    }\\n    emit SentBatch(\\n      _msgSender(),\\n      recipients,\\n      amounts,\\n      userData,\\n      operatorData,\\n      requireReceptionAck\\n    );\\n  }\\n\\n  /**\\n   * @notice See ERC777-approve for details [here](\\n   * https://docs.openzeppelin.com/contracts/4.x/api/token/erc777#ERC777-approve-address-uint256-)\\n   *\\n   * @dev This function is a wrapper around ERC777-approve.\\n   *\\n   * ##### Requirements:\\n   *\\n   * - The contract must not be paused.\\n   * - Accounts cannot have allowance issued by their operators.\\n   * - If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically\\n   * equivalent to an infinite approval.\\n   */\\n  function approve(address spender, uint256 value)\\n    public\\n    virtual\\n    override\\n    whenNotPaused\\n    returns (bool)\\n  {\\n    _beforeOperatorChange(spender, value);\\n    return super.approve(spender, value);\\n  }\\n\\n  /**\\n   * @notice Authorize an operator to spend on behalf of the sender\\n   *\\n   * @dev See IERC777-authorizeOperator for details [here](\\n   * https://docs.openzeppelin.com/contracts/4.x/api/token/erc777#IERC777-authorizeOperator-address-)\\n   *\\n   * ##### Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  function authorizeOperator(address operator) public virtual override {\\n    _beforeOperatorChange(operator, 0);\\n    return super.authorizeOperator(operator);\\n  }\\n\\n  /**\\n   * @notice Revoke an operator to disable their ability to spend on behalf of the sender\\n   *\\n   * @dev See IERC777-authorizeOperator for details [here](\\n   * https://docs.openzeppelin.com/contracts/4.x/api/token/erc777#IERC777-authorizeOperator-address-)\\n   *\\n   * ##### Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  function revokeOperator(address operator) public virtual override {\\n    _beforeOperatorChange(operator, 0);\\n    return super.revokeOperator(operator);\\n  }\\n\\n  /**\\n   * @notice Pauses all functions that can mutate state\\n   *\\n   * @dev Used to effectively freeze a contract so that no state updates can occur\\n   *\\n   * ##### Requirements:\\n   *\\n   * - The caller must have the `PAUSER_ROLE`.\\n   */\\n  function pause() public onlyRole(PAUSER_ROLE) {\\n    _pause();\\n  }\\n\\n  /**\\n   * @notice Unpauses **all** token transfers.\\n   *\\n   * @dev\\n   *\\n   * ##### Requirements:\\n   *\\n   * - The caller must have the `PAUSER_ROLE`.\\n   */\\n  function unpause() public onlyRole(PAUSER_ROLE) {\\n    _unpause();\\n  }\\n\\n  /**\\n   * @notice Returns the balances of a batch of addresses in a single call\\n   */\\n  function balanceOfBatch(address[] memory accounts)\\n    public\\n    view\\n    returns (uint256[] memory)\\n  {\\n    uint256[] memory batchBalances = new uint256[](accounts.length);\\n    for (uint256 i = 0; i < accounts.length; ++i) {\\n      batchBalances[i] = balanceOf(accounts[i]);\\n    }\\n    return batchBalances;\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __ERC777PresetPausablePermissioned_init_unchained()\\n    internal\\n    onlyInitializing\\n  {\\n    _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    _grantRole(PAUSER_ROLE, _msgSender());\\n  }\\n\\n  /**\\n   * @notice Hook that is called before granting/revoking operator allowances\\n   *\\n   * @dev This overrides the behavior of `approve`, `authorizeOperator, and `revokeOperator` with pausable behavior.\\n   * When the contract is paused, these functions will not be callable. Follows the rules of hooks defined\\n   * [here](https://docs.openzeppelin.com/contracts/4.x/extending-contracts#rules_of_hooks)\\n   *\\n   * ##### Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  function _beforeOperatorChange(address, uint256)\\n    internal\\n    virtual\\n    whenNotPaused\\n  {} // solhint-disable-line no-empty-blocks\\n\\n  /**\\n   * @notice Hook that is called before granting/revoking roles via `grantRole`, `revokeRole`, `renounceRole`\\n   *\\n   * @dev This overrides the behavior of `_grantRole`, `_setupRole`, `_revokeRole`, and `_renounceRole` with pausable\\n   * behavior. When the contract is paused, these functions will not be callable. Follows the rules of hooks\\n   * defined [here](https://docs.openzeppelin.com/contracts/4.x/extending-contracts#rules_of_hooks)\\n   *\\n   * ##### Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  function _beforeRoleChange(bytes32, address) internal virtual whenNotPaused {} // solhint-disable-line no-empty-blocks\\n\\n  /**\\n   * @notice A hook that is called before a token transfer occurs.\\n   *\\n   * @dev When the contract is paused, these functions will not be callable. Follows the rules of hooks defined\\n   * [here](https://docs.openzeppelin.com/contracts/4.x/extending-contracts#rules_of_hooks)\\n   *\\n   * ##### Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  function _beforeTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual override whenNotPaused {\\n    super._beforeTokenTransfer(operator, from, to, amount);\\n  }\\n\\n  /**\\n   * @notice Grants a role to an account.\\n   *\\n   * @dev Grants `role` to `account` if the `_beforeRoleGranted` hook is satisfied\\n   *\\n   * ##### Requirements:\\n   *\\n   * - The contract must not be paused.\\n   * - The requirements of _beforeRoleGranted_ must be satisfied.\\n   */\\n  function _grantRole(bytes32 role, address account) internal virtual override {\\n    _beforeRoleChange(role, account);\\n    super._grantRole(role, account);\\n  }\\n\\n  /**\\n   * @notice Revokes a role from an account.\\n   *\\n   * @dev Revokes `role` from `account` if the `_beforeRoleGranted` hook is satisfied\\n   *\\n   * ##### Requirements:\\n   *\\n   * - The contract must not be paused.\\n   * - The requirements of _beforeRoleGranted_ must be satisfied.\\n   */\\n  function _revokeRole(bytes32 role, address account)\\n    internal\\n    virtual\\n    override\\n  {\\n    _beforeRoleChange(role, account);\\n    super._revokeRole(role, account);\\n  }\\n}\\n\"},\"contracts/NORI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"./ERC777PresetPausablePermissioned.sol\\\";\\n\\ncontract NORI is ERC777PresetPausablePermissioned {\\n  function initialize() public virtual initializer {\\n    __NORI_init();\\n    _mint(\\n      _msgSender(),\\n      500_000_000 * 10**18, // 500,000,000 NORI\\n      \\\"\\\",\\n      \\\"\\\"\\n    );\\n  }\\n\\n  /**\\n   * @notice Initializer variant that embeds the linearized calls to all parent initializers.\\n   * @dev Follows the multiple inheritance initializer rules defined [here](\\n   * https://docs.openzeppelin.com/contracts/3.x/upgradeable#multiple-inheritance). As a consequence,\\n   * calling two of these init functions can potentially initialize the same contract twice.\\n   */\\n  function __NORI_init() internal onlyInitializing {\\n    // solhint-disable-previous-line func-name-mixedcase\\n    __Context_init_unchained();\\n    __ERC165_init_unchained();\\n    __AccessControl_init_unchained();\\n    __AccessControlEnumerable_init_unchained();\\n    __Pausable_init_unchained();\\n    __ERC777PresetPausablePermissioned_init_unchained();\\n    __ERC777_init_unchained(\\\"NORI\\\", \\\"NORI\\\", new address[](0));\\n    __NORI_init_unchained();\\n  }\\n\\n  /**\\n   * @notice Initializer variant that does **not** embed linearized calls to any parent initializers.\\n   * @dev Follows the multiple inheritance initializer rules defined [here](\\n   * https://docs.openzeppelin.com/contracts/3.x/upgradeable#multiple-inheritance). As a consequence,\\n   * calling two of these init functions can potentially initialize the same contract twice.\\n   */\\n  function __NORI_init_unchained() internal onlyInitializing {\\n    // solhint-disable-previous-line no-empty-blocks, func-name-mixedcase\\n  }\\n}\\n\"}}}","address":"0xe35401Eb5078388D49f47d631a0ce0733a31A425","bytecode":"0x608060405234801561001057600080fd5b50613545806100206000396000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c80638456cb5911610130578063c4d66de8116100b8578063dd62ed3e1161007c578063dd62ed3e146104d4578063e63ab1e91461050d578063fad8b32a14610522578063fc673c4f14610535578063fe9d93031461054857600080fd5b8063c4d66de814610475578063ca15c87314610488578063cf2c52cb1461049b578063d547741f146104ae578063d95b6371146104c157600080fd5b806395d89b41116100ff57806395d89b41146104185780639bd9bbc614610420578063a217fddf14610433578063a3b0b5a31461043b578063a9059cbb1461046257600080fd5b80638456cb59146103bf5780639010d07c146103c757806391d14854146103f2578063959b8c3f1461040557600080fd5b8063313ce567116101be5780635c975abb116101825780635c975abb1461035d57806362ad1b831461036857806366cf8bce1461037b57806370a082311461038e5780638129fc1c146103b757600080fd5b8063313ce5671461030c57806336568abe1461031b5780633f4ba83a1461032e578063458c738e14610336578063556f0dc71461035657600080fd5b806318160ddd1161020557806318160ddd1461029c57806323b872dd146102ae578063248a9ca3146102c15780632e1a7d4d146102e45780632f2ff15d146102f957600080fd5b806301ffc9a71461023757806306e485381461025f57806306fdde0314610274578063095ea7b314610289575b600080fd5b61024a61024536600461284d565b61055b565b60405190151581526020015b60405180910390f35b610267610586565b60405161025691906128bb565b61027c6105e8565b6040516102569190612926565b61024a61029736600461294e565b610671565b6034545b604051908152602001610256565b61024a6102bc36600461297a565b6106c0565b6102a06102cf3660046129bb565b600090815260c9602052604090206001015490565b6102f76102f23660046129bb565b6107ee565b005b6102f76103073660046129d4565b61081b565b60405160128152602001610256565b6102f76103293660046129d4565b610846565b6102f76108c4565b610349610344366004612ae1565b6108e5565b6040516102569190612b4d565b60016102a0565b60655460ff1661024a565b6102f7610376366004612bcf565b6109a6565b6102f7610389366004612da5565b6109e2565b6102a061039c366004612e69565b6001600160a01b031660009081526033602052604090205490565b6102f7610cc1565b6102f7610d66565b6103da6103d5366004612e86565b610d87565b6040516001600160a01b039091168152602001610256565b61024a6104003660046129d4565b610d9f565b6102f7610413366004612e69565b610dca565b61027c610dde565b6102f761042e366004612ea8565b610ded565b6102a0600081565b6102a07f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a981565b61024a61047036600461294e565b610e0b565b6102f7610483366004612e69565b610ec8565b6102a06104963660046129bb565b610f43565b6102f76104a9366004612f00565b610f5a565b6102f76104bc3660046129d4565b610fe4565b61024a6104cf366004612f84565b61100a565b6102a06104e2366004612f84565b6001600160a01b039182166000908152603b6020908152604080832093909416825291909152205490565b6102a06000805160206134f083398151915281565b6102f7610530366004612e69565b6110ab565b6102f7610543366004612fb2565b6110bf565b6102f7610556366004613031565b6110f7565b60006001600160e01b03198216635a05180f60e01b1480610580575061058082611112565b92915050565b606060378054806020026020016040519081016040528092919081815260200182805480156105de57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116105c0575b5050505050905090565b6060603580546105f790613077565b80601f016020809104026020016040519081016040528092919081815260200182805461062390613077565b80156105de5780601f10610645576101008083540402835291602001916105de565b820191906000526020600020905b81548152906001019060200180831161065357509395945050505050565b600061067f60655460ff1690565b156106a55760405162461bcd60e51b815260040161069c906130b1565b60405180910390fd5b6106af8383611147565b6106b9838361116a565b9392505050565b60006001600160a01b0383166106e85760405162461bcd60e51b815260040161069c906130db565b6001600160a01b03841661074d5760405162461bcd60e51b815260206004820152602660248201527f4552433737373a207472616e736665722066726f6d20746865207a65726f206160448201526564647265737360d01b606482015260840161069c565b600033905061077e818686866040518060200160405280600081525060405180602001604052806000815250611178565b6107898582856112a0565b6107b581868686604051806020016040528060008152506040518060200160405280600081525061132c565b6107e3818686866040518060200160405280600081525060405180602001604052806000815250600061149e565b506001949350505050565b61081833826040518060200160405280600081525060405180602001604052806000815250611663565b50565b600082815260c960205260409020600101546108378133611825565b6108418383611889565b505050565b6001600160a01b03811633146108b65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161069c565b6108c0828261189d565b5050565b6000805160206134f08339815191526108dd8133611825565b6108186118b1565b6060600082516001600160401b0381111561090257610902612a04565b60405190808252806020026020018201604052801561092b578160200160208202803683370190505b50905060005b835181101561099f5761097284828151811061094f5761094f61311f565b60200260200101516001600160a01b031660009081526033602052604090205490565b8282815181106109845761098461311f565b60209081029190910101526109988161314b565b9050610931565b5092915050565b6109b0338661100a565b6109cc5760405162461bcd60e51b815260040161069c90613164565b6109db85858585856001611944565b5050505050565b8351855114610a565760405162461bcd60e51b815260206004820152604660248201526000805160206134d083398151915260448201527f3a20726563697069656e7420616e6420616d6f756e74206c656e677468206d696064820152650e6dac2e8c6d60d31b608482015260a40161069c565b8251845114610aca5760405162461bcd60e51b815260206004820152604660248201526000805160206134d083398151915260448201527f3a20616d6f756e747320616e64207573657244617461206c656e677468206d696064820152650e6dac2e8c6d60d31b608482015260a40161069c565b8151835114610b435760405162461bcd60e51b815260206004820152604b60248201526000805160206134d083398151915260448201527f3a20757365724461746120616e64206f70657261746f7244617461206c656e6760648201526a0e8d040dad2e6dac2e8c6d60ab1b608482015260a40161069c565b8051825114610bc75760405162461bcd60e51b815260206004820152605660248201526000805160206134d083398151915260448201527f3a206f70657261746f724461746120616e6420726571756972655265636570746064820152750d2dedc82c6d640d8cadccee8d040dad2e6dac2e8c6d60531b608482015260a40161069c565b60005b8551811015610c7057610c5e33878381518110610be957610be961311f565b6020026020010151878481518110610c0357610c0361311f565b6020026020010151878581518110610c1d57610c1d61311f565b6020026020010151878681518110610c3757610c3761311f565b6020026020010151878781518110610c5157610c5161311f565b6020026020010151611944565b80610c688161314b565b915050610bca565b50336001600160a01b03167fd5865ae34f92a2d6a803fa13140b8165046f54e61e68560b26950c62a668c6b68686868686604051610cb2959493929190613205565b60405180910390a25050505050565b600054610100900460ff16610cdc5760005460ff1615610ce0565b303b155b610cfc5760405162461bcd60e51b815260040161069c9061329a565b600054610100900460ff16158015610d1e576000805461ffff19166101011790555b60405162461bcd60e51b815260206004820152601e60248201527f42726964676564506f6c79676f6e4e4f52493a20646973616c6c6f7765640000604482015260640161069c565b6000805160206134f0833981519152610d7f8133611825565b610818611a27565b600082815260fb602052604081206106b99083611a7f565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610dd5816000611147565b61081881611a8b565b6060603680546105f790613077565b61084133848484604051806020016040528060008152506001611944565b60006001600160a01b038316610e335760405162461bcd60e51b815260040161069c906130db565b6000339050610e64818286866040518060200160405280600081525060405180602001604052806000815250611178565b610e9081828686604051806020016040528060008152506040518060200160405280600081525061132c565b610ebe818286866040518060200160405280600081525060405180602001604052806000815250600061149e565b5060019392505050565b600054610100900460ff16610ee35760005460ff1615610ee7565b303b155b610f035760405162461bcd60e51b815260040161069c9061329a565b600054610100900460ff16158015610f25576000805461ffff19166101011790555b610f2e82611ba8565b80156108c0576000805461ff00191690555050565b600081815260fb6020526040812061058090611c54565b7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a9610f858133611825565b6000610f93838501856129bb565b90506109db858286868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525060408051602081019091529081529250611c5e915050565b600082815260c960205260409020600101546110008133611825565b610841838361189d565b6000816001600160a01b0316836001600160a01b0316148061107557506001600160a01b03831660009081526038602052604090205460ff16801561107557506001600160a01b038083166000908152603a602090815260408083209387168352929052205460ff16155b806106b95750506001600160a01b0390811660009081526039602090815260408083209490931682529290925290205460ff1690565b6110b6816000611147565b61081881611c6c565b6110c9338561100a565b6110e55760405162461bcd60e51b815260040161069c90613164565b6110f184848484611663565b50505050565b6108c033838360405180602001604052806000815250611663565b60006001600160e01b03198216637965db0b60e01b148061058057506301ffc9a760e01b6001600160e01b0319831614610580565b60655460ff16156108c05760405162461bcd60e51b815260040161069c906130b1565b600033610ebe818585611d87565b60405163555ddc6560e11b81526001600160a01b03861660048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe8956024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa1580156111f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121d91906132e8565b90506001600160a01b0381161561129757604051633ad5cbc160e11b81526001600160a01b038216906375ab978290611264908a908a908a908a908a908a90600401613305565b600060405180830381600087803b15801561127e57600080fd5b505af1158015611292573d6000803e3d6000fd5b505050505b50505050505050565b6001600160a01b038381166000908152603b602090815260408083209386168352929052205460001981146110f1578181101561131f5760405162461bcd60e51b815260206004820152601e60248201527f4552433737373a20696e73756666696369656e7420616c6c6f77616e63650000604482015260640161069c565b6110f18484848403611d87565b61133886868686611eae565b6001600160a01b038516600090815260336020526040902054838110156113b15760405162461bcd60e51b815260206004820152602760248201527f4552433737373a207472616e7366657220616d6f756e7420657863656564732060448201526662616c616e636560c81b606482015260840161069c565b6001600160a01b038087166000908152603360205260408082208785039055918716815290812080548692906113e890849061335f565b92505081905550846001600160a01b0316866001600160a01b0316886001600160a01b03167f06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc8261467798787878760405161144093929190613377565b60405180910390a4846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405161148d91815260200190565b60405180910390a350505050505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b6024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa15801561151f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154391906132e8565b90506001600160a01b038116156115bf576040516223de2960e01b81526001600160a01b038216906223de2990611588908b908b908b908b908b908b90600401613305565b600060405180830381600087803b1580156115a257600080fd5b505af11580156115b6573d6000803e3d6000fd5b50505050611659565b8115611659576001600160a01b0386163b156116595760405162461bcd60e51b815260206004820152604d60248201527f4552433737373a20746f6b656e20726563697069656e7420636f6e747261637460448201527f20686173206e6f20696d706c656d656e74657220666f7220455243373737546f60648201526c1ad95b9cd49958da5c1a595b9d609a1b608482015260a40161069c565b5050505050505050565b6001600160a01b0384166116c45760405162461bcd60e51b815260206004820152602260248201527f4552433737373a206275726e2066726f6d20746865207a65726f206164647265604482015261737360f01b606482015260840161069c565b336116d481866000878787611178565b6116e18186600087611eae565b6001600160a01b038516600090815260336020526040902054848110156117565760405162461bcd60e51b815260206004820152602360248201527f4552433737373a206275726e20616d6f756e7420657863656564732062616c616044820152626e636560e81b606482015260840161069c565b6001600160a01b03861660009081526033602052604081208683039055603480548792906117859084906133ac565b92505081905550856001600160a01b0316826001600160a01b03167fa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a40988787876040516117d393929190613377565b60405180910390a36040518581526000906001600160a01b038816907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a3505050505050565b61182f8282610d9f565b6108c057611847816001600160a01b03166014611ed6565b611852836020611ed6565b6040516020016118639291906133c3565b60408051601f198184030181529082905262461bcd60e51b825261069c91600401612926565b6118938282611147565b6108c08282612071565b6118a78282611147565b6108c08282612093565b60655460ff166118fa5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161069c565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0386166119a55760405162461bcd60e51b815260206004820152602260248201527f4552433737373a2073656e642066726f6d20746865207a65726f206164647265604482015261737360f01b606482015260840161069c565b6001600160a01b0385166119fb5760405162461bcd60e51b815260206004820181905260248201527f4552433737373a2073656e6420746f20746865207a65726f2061646472657373604482015260640161069c565b33611a0a818888888888611178565b611a1881888888888861132c565b6112978188888888888861149e565b60655460ff1615611a4a5760405162461bcd60e51b815260040161069c906130b1565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586119273390565b60006106b983836120b5565b6001600160a01b0381163303611aef5760405162461bcd60e51b8152602060048201526024808201527f4552433737373a20617574686f72697a696e672073656c66206173206f70657260448201526330ba37b960e11b606482015260840161069c565b6001600160a01b03811660009081526038602052604090205460ff1615611b4057336000908152603a602090815260408083206001600160a01b03851684529091529020805460ff19169055611b6f565b3360009081526039602090815260408083206001600160a01b03851684529091529020805460ff191660011790555b60405133906001600160a01b038316907ff4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f990600090a350565b600054610100900460ff16611bcf5760405162461bcd60e51b815260040161069c90613438565b611bd76120df565b611bdf6120df565b611be76120df565b611bef6120df565b611bf7612108565b611bff61213b565b6040805180820182526004808252634e4f524960e01b60208084018290528451808601865292835282810191909152835160008152908101909352611c4392612185565b611c4b6120df565b6108188161236f565b6000610580825490565b6110f18484848460016123c0565b336001600160a01b03821603611cce5760405162461bcd60e51b815260206004820152602160248201527f4552433737373a207265766f6b696e672073656c66206173206f70657261746f6044820152603960f91b606482015260840161069c565b6001600160a01b03811660009081526038602052604090205460ff1615611d2257336000908152603a602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611d4e565b3360009081526039602090815260408083206001600160a01b03851684529091529020805460ff191690555b60405133906001600160a01b038316907f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa190600090a350565b6001600160a01b038316611deb5760405162461bcd60e51b815260206004820152602560248201527f4552433737373a20617070726f76652066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161069c565b6001600160a01b038216611e4d5760405162461bcd60e51b815260206004820152602360248201527f4552433737373a20617070726f766520746f20746865207a65726f206164647260448201526265737360e81b606482015260840161069c565b6001600160a01b038381166000818152603b602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60655460ff1615611ed15760405162461bcd60e51b815260040161069c906130b1565b6110f1565b60606000611ee5836002613483565b611ef090600261335f565b6001600160401b03811115611f0757611f07612a04565b6040519080825280601f01601f191660200182016040528015611f31576020820181803683370190505b509050600360fc1b81600081518110611f4c57611f4c61311f565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f7b57611f7b61311f565b60200101906001600160f81b031916908160001a9053506000611f9f846002613483565b611faa90600161335f565b90505b6001811115612022576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611fde57611fde61311f565b1a60f81b828281518110611ff457611ff461311f565b60200101906001600160f81b031916908160001a90535060049490941c9361201b816134a2565b9050611fad565b5083156106b95760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161069c565b61207b8282612506565b600082815260fb60205260409020610841908261258c565b61209d82826125a1565b600082815260fb602052604090206108419082612608565b60008260000182815481106120cc576120cc61311f565b9060005260206000200154905092915050565b600054610100900460ff166121065760405162461bcd60e51b815260040161069c90613438565b565b600054610100900460ff1661212f5760405162461bcd60e51b815260040161069c90613438565b6065805460ff19169055565b600054610100900460ff166121625760405162461bcd60e51b815260040161069c90613438565b61216d600033611889565b6121066000805160206134f083398151915233611889565b600054610100900460ff166121ac5760405162461bcd60e51b815260040161069c90613438565b82516121bf90603590602086019061275f565b5081516121d390603690602085019061275f565b5080516121e79060379060208401906127e3565b5060005b81518110156122505760016038600084848151811061220c5761220c61311f565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806122488161314b565b9150506121eb565b506040516329965a1d60e01b815230600482018190527fac7fbab5f54a3ca8194167523c6753bfeb96a445279294b6125b68cce217705460248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b1580156122ca57600080fd5b505af11580156122de573d6000803e3d6000fd5b50506040516329965a1d60e01b815230600482018190527faea199e31a596269b42cdafd93407f14436db6e4cad65417994c2eb37381e05a60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad2492506329965a1d9150606401600060405180830381600087803b15801561235b57600080fd5b505af1158015611297573d6000803e3d6000fd5b600054610100900460ff166123965760405162461bcd60e51b815260040161069c90613438565b6108187f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a982611889565b6001600160a01b0385166124165760405162461bcd60e51b815260206004820181905260248201527f4552433737373a206d696e7420746f20746865207a65726f2061646472657373604482015260640161069c565b336124248160008888611eae565b8460346000828254612436919061335f565b90915550506001600160a01b0386166000908152603360205260408120805487929061246390849061335f565b909155506124799050816000888888888861149e565b856001600160a01b0316816001600160a01b03167f2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d8787876040516124c093929190613377565b60405180910390a36040518581526001600160a01b038716906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611815565b6125108282610d9f565b6108c057600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191660011790556125483390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006106b9836001600160a01b03841661261d565b6125ab8282610d9f565b156108c057600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006106b9836001600160a01b03841661266c565b600081815260018301602052604081205461266457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610580565b506000610580565b600081815260018301602052604081205480156127555760006126906001836133ac565b85549091506000906126a4906001906133ac565b90508181146127095760008660000182815481106126c4576126c461311f565b90600052602060002001549050808760000184815481106126e7576126e761311f565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061271a5761271a6134b9565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610580565b6000915050610580565b82805461276b90613077565b90600052602060002090601f01602090048101928261278d57600085556127d3565b82601f106127a657805160ff19168380011785556127d3565b828001600101855582156127d3579182015b828111156127d35782518255916020019190600101906127b8565b506127df929150612838565b5090565b8280548282559060005260206000209081019282156127d3579160200282015b828111156127d357825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612803565b5b808211156127df5760008155600101612839565b60006020828403121561285f57600080fd5b81356001600160e01b0319811681146106b957600080fd5b600081518084526020808501945080840160005b838110156128b05781516001600160a01b03168752958201959082019060010161288b565b509495945050505050565b6020815260006106b96020830184612877565b60005b838110156128e95781810151838201526020016128d1565b838111156110f15750506000910152565b600081518084526129128160208601602086016128ce565b601f01601f19169290920160200192915050565b6020815260006106b960208301846128fa565b6001600160a01b038116811461081857600080fd5b6000806040838503121561296157600080fd5b823561296c81612939565b946020939093013593505050565b60008060006060848603121561298f57600080fd5b833561299a81612939565b925060208401356129aa81612939565b929592945050506040919091013590565b6000602082840312156129cd57600080fd5b5035919050565b600080604083850312156129e757600080fd5b8235915060208301356129f981612939565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612a4257612a42612a04565b604052919050565b60006001600160401b03821115612a6357612a63612a04565b5060051b60200190565b600082601f830112612a7e57600080fd5b81356020612a93612a8e83612a4a565b612a1a565b82815260059290921b84018101918181019086841115612ab257600080fd5b8286015b84811015612ad6578035612ac981612939565b8352918301918301612ab6565b509695505050505050565b600060208284031215612af357600080fd5b81356001600160401b03811115612b0957600080fd5b612b1584828501612a6d565b949350505050565b600081518084526020808501945080840160005b838110156128b057815187529582019590820190600101612b31565b6020815260006106b96020830184612b1d565b600082601f830112612b7157600080fd5b81356001600160401b03811115612b8a57612b8a612a04565b612b9d601f8201601f1916602001612a1a565b818152846020838601011115612bb257600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215612be757600080fd5b8535612bf281612939565b94506020860135612c0281612939565b93506040860135925060608601356001600160401b0380821115612c2557600080fd5b612c3189838a01612b60565b93506080880135915080821115612c4757600080fd5b50612c5488828901612b60565b9150509295509295909350565b600082601f830112612c7257600080fd5b81356020612c82612a8e83612a4a565b82815260059290921b84018101918181019086841115612ca157600080fd5b8286015b84811015612ad65780358352918301918301612ca5565b600082601f830112612ccd57600080fd5b81356020612cdd612a8e83612a4a565b82815260059290921b84018101918181019086841115612cfc57600080fd5b8286015b84811015612ad65780356001600160401b03811115612d1f5760008081fd5b612d2d8986838b0101612b60565b845250918301918301612d00565b600082601f830112612d4c57600080fd5b81356020612d5c612a8e83612a4a565b82815260059290921b84018101918181019086841115612d7b57600080fd5b8286015b84811015612ad65780358015158114612d985760008081fd5b8352918301918301612d7f565b600080600080600060a08688031215612dbd57600080fd5b85356001600160401b0380821115612dd457600080fd5b612de089838a01612a6d565b96506020880135915080821115612df657600080fd5b612e0289838a01612c61565b95506040880135915080821115612e1857600080fd5b612e2489838a01612cbc565b94506060880135915080821115612e3a57600080fd5b612e4689838a01612cbc565b93506080880135915080821115612e5c57600080fd5b50612c5488828901612d3b565b600060208284031215612e7b57600080fd5b81356106b981612939565b60008060408385031215612e9957600080fd5b50508035926020909101359150565b600080600060608486031215612ebd57600080fd5b8335612ec881612939565b92506020840135915060408401356001600160401b03811115612eea57600080fd5b612ef686828701612b60565b9150509250925092565b600080600060408486031215612f1557600080fd5b8335612f2081612939565b925060208401356001600160401b0380821115612f3c57600080fd5b818601915086601f830112612f5057600080fd5b813581811115612f5f57600080fd5b876020828501011115612f7157600080fd5b6020830194508093505050509250925092565b60008060408385031215612f9757600080fd5b8235612fa281612939565b915060208301356129f981612939565b60008060008060808587031215612fc857600080fd5b8435612fd381612939565b93506020850135925060408501356001600160401b0380821115612ff657600080fd5b61300288838901612b60565b9350606087013591508082111561301857600080fd5b5061302587828801612b60565b91505092959194509250565b6000806040838503121561304457600080fd5b8235915060208301356001600160401b0381111561306157600080fd5b61306d85828601612b60565b9150509250929050565b600181811c9082168061308b57607f821691505b6020821081036130ab57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526024908201527f4552433737373a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161315d5761315d613135565b5060010190565b6020808252602c908201527f4552433737373a2063616c6c6572206973206e6f7420616e206f70657261746f60408201526b39103337b9103437b63232b960a11b606082015260800190565b600081518084526020808501808196508360051b8101915082860160005b858110156131f85782840389526131e68483516128fa565b988501989350908401906001016131ce565b5091979650505050505050565b60a08152600061321860a0830188612877565b60208382038185015261322b8289612b1d565b9150838203604085015261323f82886131b0565b9150838203606085015261325382876131b0565b8481036080860152855180825282870193509082019060005b8181101561328a57845115158352938301939183019160010161326c565b50909a9950505050505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000602082840312156132fa57600080fd5b81516106b981612939565b6001600160a01b0387811682528681166020830152851660408201526060810184905260c060808201819052600090613340908301856128fa565b82810360a084015261335281856128fa565b9998505050505050505050565b6000821982111561337257613372613135565b500190565b83815260606020820152600061339060608301856128fa565b82810360408401526133a281856128fa565b9695505050505050565b6000828210156133be576133be613135565b500390565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516133fb8160178501602088016128ce565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161342c8160288401602088016128ce565b01602801949350505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600081600019048311821515161561349d5761349d613135565b500290565b6000816134b1576134b1613135565b506000190190565b634e487b7160e01b600052603160045260246000fdfe4552433737375072657365745061757361626c655065726d697373696f6e656465d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa264697066735822122090c3909b35c0812b03ed0d2a728492cdb6440cf66c530732a147f86a576b556064736f6c634300080d0033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106102325760003560e01c80638456cb5911610130578063c4d66de8116100b8578063dd62ed3e1161007c578063dd62ed3e146104d4578063e63ab1e91461050d578063fad8b32a14610522578063fc673c4f14610535578063fe9d93031461054857600080fd5b8063c4d66de814610475578063ca15c87314610488578063cf2c52cb1461049b578063d547741f146104ae578063d95b6371146104c157600080fd5b806395d89b41116100ff57806395d89b41146104185780639bd9bbc614610420578063a217fddf14610433578063a3b0b5a31461043b578063a9059cbb1461046257600080fd5b80638456cb59146103bf5780639010d07c146103c757806391d14854146103f2578063959b8c3f1461040557600080fd5b8063313ce567116101be5780635c975abb116101825780635c975abb1461035d57806362ad1b831461036857806366cf8bce1461037b57806370a082311461038e5780638129fc1c146103b757600080fd5b8063313ce5671461030c57806336568abe1461031b5780633f4ba83a1461032e578063458c738e14610336578063556f0dc71461035657600080fd5b806318160ddd1161020557806318160ddd1461029c57806323b872dd146102ae578063248a9ca3146102c15780632e1a7d4d146102e45780632f2ff15d146102f957600080fd5b806301ffc9a71461023757806306e485381461025f57806306fdde0314610274578063095ea7b314610289575b600080fd5b61024a61024536600461284d565b61055b565b60405190151581526020015b60405180910390f35b610267610586565b60405161025691906128bb565b61027c6105e8565b6040516102569190612926565b61024a61029736600461294e565b610671565b6034545b604051908152602001610256565b61024a6102bc36600461297a565b6106c0565b6102a06102cf3660046129bb565b600090815260c9602052604090206001015490565b6102f76102f23660046129bb565b6107ee565b005b6102f76103073660046129d4565b61081b565b60405160128152602001610256565b6102f76103293660046129d4565b610846565b6102f76108c4565b610349610344366004612ae1565b6108e5565b6040516102569190612b4d565b60016102a0565b60655460ff1661024a565b6102f7610376366004612bcf565b6109a6565b6102f7610389366004612da5565b6109e2565b6102a061039c366004612e69565b6001600160a01b031660009081526033602052604090205490565b6102f7610cc1565b6102f7610d66565b6103da6103d5366004612e86565b610d87565b6040516001600160a01b039091168152602001610256565b61024a6104003660046129d4565b610d9f565b6102f7610413366004612e69565b610dca565b61027c610dde565b6102f761042e366004612ea8565b610ded565b6102a0600081565b6102a07f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a981565b61024a61047036600461294e565b610e0b565b6102f7610483366004612e69565b610ec8565b6102a06104963660046129bb565b610f43565b6102f76104a9366004612f00565b610f5a565b6102f76104bc3660046129d4565b610fe4565b61024a6104cf366004612f84565b61100a565b6102a06104e2366004612f84565b6001600160a01b039182166000908152603b6020908152604080832093909416825291909152205490565b6102a06000805160206134f083398151915281565b6102f7610530366004612e69565b6110ab565b6102f7610543366004612fb2565b6110bf565b6102f7610556366004613031565b6110f7565b60006001600160e01b03198216635a05180f60e01b1480610580575061058082611112565b92915050565b606060378054806020026020016040519081016040528092919081815260200182805480156105de57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116105c0575b5050505050905090565b6060603580546105f790613077565b80601f016020809104026020016040519081016040528092919081815260200182805461062390613077565b80156105de5780601f10610645576101008083540402835291602001916105de565b820191906000526020600020905b81548152906001019060200180831161065357509395945050505050565b600061067f60655460ff1690565b156106a55760405162461bcd60e51b815260040161069c906130b1565b60405180910390fd5b6106af8383611147565b6106b9838361116a565b9392505050565b60006001600160a01b0383166106e85760405162461bcd60e51b815260040161069c906130db565b6001600160a01b03841661074d5760405162461bcd60e51b815260206004820152602660248201527f4552433737373a207472616e736665722066726f6d20746865207a65726f206160448201526564647265737360d01b606482015260840161069c565b600033905061077e818686866040518060200160405280600081525060405180602001604052806000815250611178565b6107898582856112a0565b6107b581868686604051806020016040528060008152506040518060200160405280600081525061132c565b6107e3818686866040518060200160405280600081525060405180602001604052806000815250600061149e565b506001949350505050565b61081833826040518060200160405280600081525060405180602001604052806000815250611663565b50565b600082815260c960205260409020600101546108378133611825565b6108418383611889565b505050565b6001600160a01b03811633146108b65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161069c565b6108c0828261189d565b5050565b6000805160206134f08339815191526108dd8133611825565b6108186118b1565b6060600082516001600160401b0381111561090257610902612a04565b60405190808252806020026020018201604052801561092b578160200160208202803683370190505b50905060005b835181101561099f5761097284828151811061094f5761094f61311f565b60200260200101516001600160a01b031660009081526033602052604090205490565b8282815181106109845761098461311f565b60209081029190910101526109988161314b565b9050610931565b5092915050565b6109b0338661100a565b6109cc5760405162461bcd60e51b815260040161069c90613164565b6109db85858585856001611944565b5050505050565b8351855114610a565760405162461bcd60e51b815260206004820152604660248201526000805160206134d083398151915260448201527f3a20726563697069656e7420616e6420616d6f756e74206c656e677468206d696064820152650e6dac2e8c6d60d31b608482015260a40161069c565b8251845114610aca5760405162461bcd60e51b815260206004820152604660248201526000805160206134d083398151915260448201527f3a20616d6f756e747320616e64207573657244617461206c656e677468206d696064820152650e6dac2e8c6d60d31b608482015260a40161069c565b8151835114610b435760405162461bcd60e51b815260206004820152604b60248201526000805160206134d083398151915260448201527f3a20757365724461746120616e64206f70657261746f7244617461206c656e6760648201526a0e8d040dad2e6dac2e8c6d60ab1b608482015260a40161069c565b8051825114610bc75760405162461bcd60e51b815260206004820152605660248201526000805160206134d083398151915260448201527f3a206f70657261746f724461746120616e6420726571756972655265636570746064820152750d2dedc82c6d640d8cadccee8d040dad2e6dac2e8c6d60531b608482015260a40161069c565b60005b8551811015610c7057610c5e33878381518110610be957610be961311f565b6020026020010151878481518110610c0357610c0361311f565b6020026020010151878581518110610c1d57610c1d61311f565b6020026020010151878681518110610c3757610c3761311f565b6020026020010151878781518110610c5157610c5161311f565b6020026020010151611944565b80610c688161314b565b915050610bca565b50336001600160a01b03167fd5865ae34f92a2d6a803fa13140b8165046f54e61e68560b26950c62a668c6b68686868686604051610cb2959493929190613205565b60405180910390a25050505050565b600054610100900460ff16610cdc5760005460ff1615610ce0565b303b155b610cfc5760405162461bcd60e51b815260040161069c9061329a565b600054610100900460ff16158015610d1e576000805461ffff19166101011790555b60405162461bcd60e51b815260206004820152601e60248201527f42726964676564506f6c79676f6e4e4f52493a20646973616c6c6f7765640000604482015260640161069c565b6000805160206134f0833981519152610d7f8133611825565b610818611a27565b600082815260fb602052604081206106b99083611a7f565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610dd5816000611147565b61081881611a8b565b6060603680546105f790613077565b61084133848484604051806020016040528060008152506001611944565b60006001600160a01b038316610e335760405162461bcd60e51b815260040161069c906130db565b6000339050610e64818286866040518060200160405280600081525060405180602001604052806000815250611178565b610e9081828686604051806020016040528060008152506040518060200160405280600081525061132c565b610ebe818286866040518060200160405280600081525060405180602001604052806000815250600061149e565b5060019392505050565b600054610100900460ff16610ee35760005460ff1615610ee7565b303b155b610f035760405162461bcd60e51b815260040161069c9061329a565b600054610100900460ff16158015610f25576000805461ffff19166101011790555b610f2e82611ba8565b80156108c0576000805461ff00191690555050565b600081815260fb6020526040812061058090611c54565b7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a9610f858133611825565b6000610f93838501856129bb565b90506109db858286868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525060408051602081019091529081529250611c5e915050565b600082815260c960205260409020600101546110008133611825565b610841838361189d565b6000816001600160a01b0316836001600160a01b0316148061107557506001600160a01b03831660009081526038602052604090205460ff16801561107557506001600160a01b038083166000908152603a602090815260408083209387168352929052205460ff16155b806106b95750506001600160a01b0390811660009081526039602090815260408083209490931682529290925290205460ff1690565b6110b6816000611147565b61081881611c6c565b6110c9338561100a565b6110e55760405162461bcd60e51b815260040161069c90613164565b6110f184848484611663565b50505050565b6108c033838360405180602001604052806000815250611663565b60006001600160e01b03198216637965db0b60e01b148061058057506301ffc9a760e01b6001600160e01b0319831614610580565b60655460ff16156108c05760405162461bcd60e51b815260040161069c906130b1565b600033610ebe818585611d87565b60405163555ddc6560e11b81526001600160a01b03861660048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe8956024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa1580156111f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121d91906132e8565b90506001600160a01b0381161561129757604051633ad5cbc160e11b81526001600160a01b038216906375ab978290611264908a908a908a908a908a908a90600401613305565b600060405180830381600087803b15801561127e57600080fd5b505af1158015611292573d6000803e3d6000fd5b505050505b50505050505050565b6001600160a01b038381166000908152603b602090815260408083209386168352929052205460001981146110f1578181101561131f5760405162461bcd60e51b815260206004820152601e60248201527f4552433737373a20696e73756666696369656e7420616c6c6f77616e63650000604482015260640161069c565b6110f18484848403611d87565b61133886868686611eae565b6001600160a01b038516600090815260336020526040902054838110156113b15760405162461bcd60e51b815260206004820152602760248201527f4552433737373a207472616e7366657220616d6f756e7420657863656564732060448201526662616c616e636560c81b606482015260840161069c565b6001600160a01b038087166000908152603360205260408082208785039055918716815290812080548692906113e890849061335f565b92505081905550846001600160a01b0316866001600160a01b0316886001600160a01b03167f06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc8261467798787878760405161144093929190613377565b60405180910390a4846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405161148d91815260200190565b60405180910390a350505050505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b6024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa15801561151f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154391906132e8565b90506001600160a01b038116156115bf576040516223de2960e01b81526001600160a01b038216906223de2990611588908b908b908b908b908b908b90600401613305565b600060405180830381600087803b1580156115a257600080fd5b505af11580156115b6573d6000803e3d6000fd5b50505050611659565b8115611659576001600160a01b0386163b156116595760405162461bcd60e51b815260206004820152604d60248201527f4552433737373a20746f6b656e20726563697069656e7420636f6e747261637460448201527f20686173206e6f20696d706c656d656e74657220666f7220455243373737546f60648201526c1ad95b9cd49958da5c1a595b9d609a1b608482015260a40161069c565b5050505050505050565b6001600160a01b0384166116c45760405162461bcd60e51b815260206004820152602260248201527f4552433737373a206275726e2066726f6d20746865207a65726f206164647265604482015261737360f01b606482015260840161069c565b336116d481866000878787611178565b6116e18186600087611eae565b6001600160a01b038516600090815260336020526040902054848110156117565760405162461bcd60e51b815260206004820152602360248201527f4552433737373a206275726e20616d6f756e7420657863656564732062616c616044820152626e636560e81b606482015260840161069c565b6001600160a01b03861660009081526033602052604081208683039055603480548792906117859084906133ac565b92505081905550856001600160a01b0316826001600160a01b03167fa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a40988787876040516117d393929190613377565b60405180910390a36040518581526000906001600160a01b038816907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a3505050505050565b61182f8282610d9f565b6108c057611847816001600160a01b03166014611ed6565b611852836020611ed6565b6040516020016118639291906133c3565b60408051601f198184030181529082905262461bcd60e51b825261069c91600401612926565b6118938282611147565b6108c08282612071565b6118a78282611147565b6108c08282612093565b60655460ff166118fa5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161069c565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0386166119a55760405162461bcd60e51b815260206004820152602260248201527f4552433737373a2073656e642066726f6d20746865207a65726f206164647265604482015261737360f01b606482015260840161069c565b6001600160a01b0385166119fb5760405162461bcd60e51b815260206004820181905260248201527f4552433737373a2073656e6420746f20746865207a65726f2061646472657373604482015260640161069c565b33611a0a818888888888611178565b611a1881888888888861132c565b6112978188888888888861149e565b60655460ff1615611a4a5760405162461bcd60e51b815260040161069c906130b1565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586119273390565b60006106b983836120b5565b6001600160a01b0381163303611aef5760405162461bcd60e51b8152602060048201526024808201527f4552433737373a20617574686f72697a696e672073656c66206173206f70657260448201526330ba37b960e11b606482015260840161069c565b6001600160a01b03811660009081526038602052604090205460ff1615611b4057336000908152603a602090815260408083206001600160a01b03851684529091529020805460ff19169055611b6f565b3360009081526039602090815260408083206001600160a01b03851684529091529020805460ff191660011790555b60405133906001600160a01b038316907ff4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f990600090a350565b600054610100900460ff16611bcf5760405162461bcd60e51b815260040161069c90613438565b611bd76120df565b611bdf6120df565b611be76120df565b611bef6120df565b611bf7612108565b611bff61213b565b6040805180820182526004808252634e4f524960e01b60208084018290528451808601865292835282810191909152835160008152908101909352611c4392612185565b611c4b6120df565b6108188161236f565b6000610580825490565b6110f18484848460016123c0565b336001600160a01b03821603611cce5760405162461bcd60e51b815260206004820152602160248201527f4552433737373a207265766f6b696e672073656c66206173206f70657261746f6044820152603960f91b606482015260840161069c565b6001600160a01b03811660009081526038602052604090205460ff1615611d2257336000908152603a602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611d4e565b3360009081526039602090815260408083206001600160a01b03851684529091529020805460ff191690555b60405133906001600160a01b038316907f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa190600090a350565b6001600160a01b038316611deb5760405162461bcd60e51b815260206004820152602560248201527f4552433737373a20617070726f76652066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161069c565b6001600160a01b038216611e4d5760405162461bcd60e51b815260206004820152602360248201527f4552433737373a20617070726f766520746f20746865207a65726f206164647260448201526265737360e81b606482015260840161069c565b6001600160a01b038381166000818152603b602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60655460ff1615611ed15760405162461bcd60e51b815260040161069c906130b1565b6110f1565b60606000611ee5836002613483565b611ef090600261335f565b6001600160401b03811115611f0757611f07612a04565b6040519080825280601f01601f191660200182016040528015611f31576020820181803683370190505b509050600360fc1b81600081518110611f4c57611f4c61311f565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f7b57611f7b61311f565b60200101906001600160f81b031916908160001a9053506000611f9f846002613483565b611faa90600161335f565b90505b6001811115612022576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611fde57611fde61311f565b1a60f81b828281518110611ff457611ff461311f565b60200101906001600160f81b031916908160001a90535060049490941c9361201b816134a2565b9050611fad565b5083156106b95760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161069c565b61207b8282612506565b600082815260fb60205260409020610841908261258c565b61209d82826125a1565b600082815260fb602052604090206108419082612608565b60008260000182815481106120cc576120cc61311f565b9060005260206000200154905092915050565b600054610100900460ff166121065760405162461bcd60e51b815260040161069c90613438565b565b600054610100900460ff1661212f5760405162461bcd60e51b815260040161069c90613438565b6065805460ff19169055565b600054610100900460ff166121625760405162461bcd60e51b815260040161069c90613438565b61216d600033611889565b6121066000805160206134f083398151915233611889565b600054610100900460ff166121ac5760405162461bcd60e51b815260040161069c90613438565b82516121bf90603590602086019061275f565b5081516121d390603690602085019061275f565b5080516121e79060379060208401906127e3565b5060005b81518110156122505760016038600084848151811061220c5761220c61311f565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806122488161314b565b9150506121eb565b506040516329965a1d60e01b815230600482018190527fac7fbab5f54a3ca8194167523c6753bfeb96a445279294b6125b68cce217705460248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b1580156122ca57600080fd5b505af11580156122de573d6000803e3d6000fd5b50506040516329965a1d60e01b815230600482018190527faea199e31a596269b42cdafd93407f14436db6e4cad65417994c2eb37381e05a60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad2492506329965a1d9150606401600060405180830381600087803b15801561235b57600080fd5b505af1158015611297573d6000803e3d6000fd5b600054610100900460ff166123965760405162461bcd60e51b815260040161069c90613438565b6108187f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a982611889565b6001600160a01b0385166124165760405162461bcd60e51b815260206004820181905260248201527f4552433737373a206d696e7420746f20746865207a65726f2061646472657373604482015260640161069c565b336124248160008888611eae565b8460346000828254612436919061335f565b90915550506001600160a01b0386166000908152603360205260408120805487929061246390849061335f565b909155506124799050816000888888888861149e565b856001600160a01b0316816001600160a01b03167f2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d8787876040516124c093929190613377565b60405180910390a36040518581526001600160a01b038716906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611815565b6125108282610d9f565b6108c057600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191660011790556125483390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006106b9836001600160a01b03841661261d565b6125ab8282610d9f565b156108c057600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006106b9836001600160a01b03841661266c565b600081815260018301602052604081205461266457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610580565b506000610580565b600081815260018301602052604081205480156127555760006126906001836133ac565b85549091506000906126a4906001906133ac565b90508181146127095760008660000182815481106126c4576126c461311f565b90600052602060002001549050808760000184815481106126e7576126e761311f565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061271a5761271a6134b9565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610580565b6000915050610580565b82805461276b90613077565b90600052602060002090601f01602090048101928261278d57600085556127d3565b82601f106127a657805160ff19168380011785556127d3565b828001600101855582156127d3579182015b828111156127d35782518255916020019190600101906127b8565b506127df929150612838565b5090565b8280548282559060005260206000209081019282156127d3579160200282015b828111156127d357825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612803565b5b808211156127df5760008155600101612839565b60006020828403121561285f57600080fd5b81356001600160e01b0319811681146106b957600080fd5b600081518084526020808501945080840160005b838110156128b05781516001600160a01b03168752958201959082019060010161288b565b509495945050505050565b6020815260006106b96020830184612877565b60005b838110156128e95781810151838201526020016128d1565b838111156110f15750506000910152565b600081518084526129128160208601602086016128ce565b601f01601f19169290920160200192915050565b6020815260006106b960208301846128fa565b6001600160a01b038116811461081857600080fd5b6000806040838503121561296157600080fd5b823561296c81612939565b946020939093013593505050565b60008060006060848603121561298f57600080fd5b833561299a81612939565b925060208401356129aa81612939565b929592945050506040919091013590565b6000602082840312156129cd57600080fd5b5035919050565b600080604083850312156129e757600080fd5b8235915060208301356129f981612939565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612a4257612a42612a04565b604052919050565b60006001600160401b03821115612a6357612a63612a04565b5060051b60200190565b600082601f830112612a7e57600080fd5b81356020612a93612a8e83612a4a565b612a1a565b82815260059290921b84018101918181019086841115612ab257600080fd5b8286015b84811015612ad6578035612ac981612939565b8352918301918301612ab6565b509695505050505050565b600060208284031215612af357600080fd5b81356001600160401b03811115612b0957600080fd5b612b1584828501612a6d565b949350505050565b600081518084526020808501945080840160005b838110156128b057815187529582019590820190600101612b31565b6020815260006106b96020830184612b1d565b600082601f830112612b7157600080fd5b81356001600160401b03811115612b8a57612b8a612a04565b612b9d601f8201601f1916602001612a1a565b818152846020838601011115612bb257600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215612be757600080fd5b8535612bf281612939565b94506020860135612c0281612939565b93506040860135925060608601356001600160401b0380821115612c2557600080fd5b612c3189838a01612b60565b93506080880135915080821115612c4757600080fd5b50612c5488828901612b60565b9150509295509295909350565b600082601f830112612c7257600080fd5b81356020612c82612a8e83612a4a565b82815260059290921b84018101918181019086841115612ca157600080fd5b8286015b84811015612ad65780358352918301918301612ca5565b600082601f830112612ccd57600080fd5b81356020612cdd612a8e83612a4a565b82815260059290921b84018101918181019086841115612cfc57600080fd5b8286015b84811015612ad65780356001600160401b03811115612d1f5760008081fd5b612d2d8986838b0101612b60565b845250918301918301612d00565b600082601f830112612d4c57600080fd5b81356020612d5c612a8e83612a4a565b82815260059290921b84018101918181019086841115612d7b57600080fd5b8286015b84811015612ad65780358015158114612d985760008081fd5b8352918301918301612d7f565b600080600080600060a08688031215612dbd57600080fd5b85356001600160401b0380821115612dd457600080fd5b612de089838a01612a6d565b96506020880135915080821115612df657600080fd5b612e0289838a01612c61565b95506040880135915080821115612e1857600080fd5b612e2489838a01612cbc565b94506060880135915080821115612e3a57600080fd5b612e4689838a01612cbc565b93506080880135915080821115612e5c57600080fd5b50612c5488828901612d3b565b600060208284031215612e7b57600080fd5b81356106b981612939565b60008060408385031215612e9957600080fd5b50508035926020909101359150565b600080600060608486031215612ebd57600080fd5b8335612ec881612939565b92506020840135915060408401356001600160401b03811115612eea57600080fd5b612ef686828701612b60565b9150509250925092565b600080600060408486031215612f1557600080fd5b8335612f2081612939565b925060208401356001600160401b0380821115612f3c57600080fd5b818601915086601f830112612f5057600080fd5b813581811115612f5f57600080fd5b876020828501011115612f7157600080fd5b6020830194508093505050509250925092565b60008060408385031215612f9757600080fd5b8235612fa281612939565b915060208301356129f981612939565b60008060008060808587031215612fc857600080fd5b8435612fd381612939565b93506020850135925060408501356001600160401b0380821115612ff657600080fd5b61300288838901612b60565b9350606087013591508082111561301857600080fd5b5061302587828801612b60565b91505092959194509250565b6000806040838503121561304457600080fd5b8235915060208301356001600160401b0381111561306157600080fd5b61306d85828601612b60565b9150509250929050565b600181811c9082168061308b57607f821691505b6020821081036130ab57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526024908201527f4552433737373a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161315d5761315d613135565b5060010190565b6020808252602c908201527f4552433737373a2063616c6c6572206973206e6f7420616e206f70657261746f60408201526b39103337b9103437b63232b960a11b606082015260800190565b600081518084526020808501808196508360051b8101915082860160005b858110156131f85782840389526131e68483516128fa565b988501989350908401906001016131ce565b5091979650505050505050565b60a08152600061321860a0830188612877565b60208382038185015261322b8289612b1d565b9150838203604085015261323f82886131b0565b9150838203606085015261325382876131b0565b8481036080860152855180825282870193509082019060005b8181101561328a57845115158352938301939183019160010161326c565b50909a9950505050505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000602082840312156132fa57600080fd5b81516106b981612939565b6001600160a01b0387811682528681166020830152851660408201526060810184905260c060808201819052600090613340908301856128fa565b82810360a084015261335281856128fa565b9998505050505050505050565b6000821982111561337257613372613135565b500190565b83815260606020820152600061339060608301856128fa565b82810360408401526133a281856128fa565b9695505050505050565b6000828210156133be576133be613135565b500390565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516133fb8160178501602088016128ce565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161342c8160288401602088016128ce565b01602801949350505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600081600019048311821515161561349d5761349d613135565b500290565b6000816134b1576134b1613135565b506000190190565b634e487b7160e01b600052603160045260246000fdfe4552433737375072657365745061757361626c655065726d697373696f6e656465d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa264697066735822122090c3909b35c0812b03ed0d2a728492cdb6440cf66c530732a147f86a576b556064736f6c634300080d0033","abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenHolder","type":"address"}],"name":"AuthorizedOperator","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"operatorData","type":"bytes"}],"name":"Burned","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"operatorData","type":"bytes"}],"name":"Minted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenHolder","type":"address"}],"name":"RevokedOperator","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"operatorData","type":"bytes"}],"name":"Sent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"address[]","name":"recipients","type":"address[]"},{"indexed":false,"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"indexed":false,"internalType":"bytes[]","name":"userData","type":"bytes[]"},{"indexed":false,"internalType":"bytes[]","name":"operatorData","type":"bytes[]"},{"indexed":false,"internalType":"bool[]","name":"requireReceptionAck","type":"bool[]"}],"name":"SentBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEPOSITOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAUSER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"holder","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"authorizeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenHolder","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes[]","name":"userData","type":"bytes[]"},{"internalType":"bytes[]","name":"operatorData","type":"bytes[]"},{"internalType":"bool[]","name":"requireReceptionAck","type":"bool[]"}],"name":"batchSend","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"defaultOperators","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"bytes","name":"depositData","type":"bytes"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"granularity","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"childChainManagerProxy","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"tokenHolder","type":"address"}],"name":"isOperatorFor","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"operatorData","type":"bytes"}],"name":"operatorBurn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"operatorData","type":"bytes"}],"name":"operatorSend","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"revokeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"send","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"holder","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}]}