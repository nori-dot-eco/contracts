{"metadata":"{\"compiler\":{\"version\":\"0.8.13\"},\"sources\":{\"contracts/LockedNORI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC777/IERC777RecipientUpgradeable.sol\\\";\\nimport \\\"./ERC777PresetPausablePermissioned.sol\\\";\\nimport \\\"./BridgedPolygonNORI.sol\\\";\\nimport {ScheduleUtils, Schedule, Cliff} from \\\"./ScheduleUtils.sol\\\";\\n\\n/**\\n * @title A wrapped BridgedPolygonNORI token contract for vesting and lockup\\n *\\n * @author Nori Inc.\\n *\\n * @notice Based on the mechanics of a wrapped ERC-777 token, this contract layers schedules over the withdrawal\\n * functionality to implement _vesting_ (a revocable grant)\\n * and _lockup_ (an irrevocable timelock on utility).\\n *\\n * ##### Behaviors and features\\n *\\n * ###### Grants\\n *\\n * - _Grants_ define lockup periods and vesting schedules for tokens\\n * - A single grant per address is supported\\n *\\n * ###### Vesting\\n *\\n * - _Vesting_ is applied in scenarios where the tokens may need to be recaptured by Nori. This could either be due to\\n * an employee leaving the company before being fully vested or because one of our suppliers incurs a carbon loss so\\n * their restricted (unvested in the terminology of this contract). tokens need to be recaptured to mitigate the loss\\n * and make the original buyer whole by using them to purchases new NRTs on their behalf.\\n * - Tokens are released linearly from the latest cliff date to the end date of the grant based on the block.timestamp\\n * of each block\\n *\\n * ###### Lockup\\n *\\n * - _Lockup_ refers to tokens that are guaranteed to be available to the grantee but are subject to a time delay before\\n * they are usable / transferrable out of this smart contract. This is a standard mechanism used to avoid sudden floods\\n * of liquidity in the BridgedPolygonNORI token that could severely depress the price.\\n * - Unlock is always at the same time or lagging vesting\\n * - Transfer of LockedNORI under lockup is forbidden\\n *\\n * ###### Cliffs\\n *\\n * - A _cliff_ refers to a period prior to which no tokens are vested or unlocked. Cliffs are defined by a date and an\\n * amount which must be <= the overall grant amount.\\n * - This contract supports a maximum of two distinct cliffs per grant. The effect of fewer cliffs can be achieve by\\n * setting one of both cliff times to the start time or end time, and/or by setting the cliff amount to zero.\\n *\\n * ###### Additional behaviors and features\\n *\\n * - [Upgradeable](https://docs.openzeppelin.com/contracts/4.x/upgradeable)\\n * - [Initializable](https://docs.openzeppelin.com/contracts/4.x/upgradeable#multiple-inheritance)\\n * - [Pausable](https://docs.openzeppelin.com/contracts/4.x/api/security#Pausable)\\n *   - all functions that mutate state are pausable\\n * - [Role-based access control](https://docs.openzeppelin.com/contracts/4.x/access-control)\\n *    - TOKEN_GRANTER_ROLE\\n *      - Can create token grants without sending BridgedPolygonNORI to the contract `createGrant`\\n *    - PAUSER_ROLE\\n *      - Can pause and unpause the contract\\n *    - DEFAULT_ADMIN_ROLE\\n *      - This is the only role that can add/revoke other accounts to any of the roles\\n * - [Can receive BridgedPolygonNORI ERC-777 tokens](https://eips.ethereum.org/EIPS/eip-777#hooks)\\n *   - BridgedPolygonNORI is wrapped and grants are created upon receipt\\n * - [Limited ERC-777 functionality](https://eips.ethereum.org/EIPS/eip-777)\\n *   - burn and operatorBurn will revert as only the internal variants are expected to be used\\n *   - mint is not callable as only the internal variants are expected to be used when wrapping BridgedPolygonNORI\\n * - [Limited ERC-20 functionality](https://docs.openzeppelin.com/contracts/4.x/erc20)\\n *   - mint is not callable as only the internal variants are expected to be used when wrapping BridgedPolygonNORI\\n *   - burn functions are not externally callable\\n * - [Extended Wrapped ERC-20 functionality](https://docs.openzeppelin.com/contracts/4.x/api/token/erc20#ERC20Wrapper)\\n *   - In absence of a grant LockedNORI functions identically to a standard wrapped token\\n *   - when a grant is defined, LockedNORI follows the restrictions noted above\\n *\\n * ##### Inherits\\n *\\n * - [ERC777Upgradeable](https://docs.openzeppelin.com/contracts/4.x/api/token/erc777#ERC777)\\n * - [PausableUpgradeable](https://docs.openzeppelin.com/contracts/4.x/api/security#Pausable)\\n * - [AccessControlEnumerableUpgradeable](https://docs.openzeppelin.com/contracts/4.x/api/access)\\n * - [ContextUpgradeable](https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable)\\n * - [Initializable](https://docs.openzeppelin.com/contracts/4.x/api/proxy#Initializable)\\n * - [ERC165Upgradeable](https://docs.openzeppelin.com/contracts/4.x/api/utils#ERC165)\\n *\\n * ##### Implements\\n *\\n * - [IERC777RecipientUpgradeable](https://docs.openzeppelin.com/contracts/4.x/api/token/erc777#IERC777Recipient)\\n * - [IERC777Upgradeable](https://docs.openzeppelin.com/contracts/4.x/api/token/erc777#IERC777)\\n * - [IERC20Upgradeable](https://docs.openzeppelin.com/contracts/4.x/api/token/erc20#IERC20)\\n * - [IAccessControlEnumerable](https://docs.openzeppelin.com/contracts/4.x/api/access#AccessControlEnumerable)\\n * - [IERC165Upgradeable](https://docs.openzeppelin.com/contracts/4.x/api/utils#IERC165)\\n *\\n * ##### Uses\\n *\\n * - [ScheduleUtils](./ScheduleUtils.md) for Schedule\\n * - [MathUpgradeable](https://docs.openzeppelin.com/contracts/4.x/api/utils#Math)\\n *\\n */\\ncontract LockedNORI is\\n  IERC777RecipientUpgradeable,\\n  ERC777PresetPausablePermissioned\\n{\\n  using ScheduleUtils for Schedule;\\n\\n  struct TokenGrant {\\n    Schedule vestingSchedule;\\n    Schedule lockupSchedule;\\n    uint256 grantAmount;\\n    uint256 claimedAmount;\\n    uint256 originalAmount;\\n    bool exists;\\n    uint256 lastRevocationTime;\\n    uint256 lastQuantityRevoked;\\n  }\\n\\n  struct TokenGrantDetail {\\n    uint256 grantAmount;\\n    address recipient;\\n    uint256 startTime;\\n    uint256 vestEndTime;\\n    uint256 unlockEndTime;\\n    uint256 cliff1Time;\\n    uint256 cliff2Time;\\n    uint256 vestCliff1Amount;\\n    uint256 vestCliff2Amount;\\n    uint256 unlockCliff1Amount;\\n    uint256 unlockCliff2Amount;\\n    uint256 claimedAmount;\\n    uint256 originalAmount;\\n    uint256 lastRevocationTime;\\n    uint256 lastQuantityRevoked;\\n    bool exists;\\n  }\\n\\n  struct CreateTokenGrantParams {\\n    address recipient;\\n    uint256 startTime;\\n    uint256 vestEndTime;\\n    uint256 unlockEndTime;\\n    uint256 cliff1Time;\\n    uint256 cliff2Time;\\n    uint256 vestCliff1Amount;\\n    uint256 vestCliff2Amount;\\n    uint256 unlockCliff1Amount;\\n    uint256 unlockCliff2Amount;\\n  }\\n\\n  struct DepositForParams {\\n    address recipient;\\n    uint256 startTime;\\n  }\\n\\n  /**\\n   * @notice Role conferring creation and revocation of token grants.\\n   */\\n  bytes32 public constant TOKEN_GRANTER_ROLE = keccak256(\\\"TOKEN_GRANTER_ROLE\\\");\\n\\n  /**\\n   * @notice Used to register the ERC777TokensRecipient recipient interface in the\\n   * ERC-1820 registry\\n   *\\n   * @dev Registering that LockedNORI implements the ERC777TokensRecipient interface with the registry is a\\n   * requiremnt to be able to receive ERC-777 BridgedPolygonNORI tokens. Once registered, sending BridgedPolygonNORI\\n   * tokens to this contract will trigger tokensReceived as part of the lifecycle of the BridgedPolygonNORI transaction\\n   */\\n  bytes32 public constant ERC777_TOKENS_RECIPIENT_HASH =\\n    keccak256(\\\"ERC777TokensRecipient\\\");\\n\\n  /**\\n   * @notice A mapping from grantee to grant\\n   */\\n  mapping(address => TokenGrant) private _grants;\\n\\n  /**\\n   * @notice The BridgedPolygonNORI contract that this contract wraps tokens for\\n   */\\n  BridgedPolygonNORI private _bridgedPolygonNori;\\n\\n  /**\\n   * @notice The [ERC-1820](https://eips.ethereum.org/EIPS/eip-1820) pseudo-introspection registry\\n   * contract\\n   *\\n   * @dev Registering that LockedNORI implements the ERC777TokensRecipient interface with the registry is a\\n   * requiremnt to be able to receive ERC-777 BridgedPolygonNORI tokens. Once registered, sending BridgedPolygonNORI\\n   * tokens to this contract will trigger tokensReceived as part of the lifecycle of the BridgedPolygonNORI transaction\\n   */\\n  IERC1820RegistryUpgradeable private _erc1820;\\n\\n  /**\\n   * @notice Emitted on successful creation of a new grant.\\n   */\\n  event TokenGrantCreated(\\n    address indexed recipient,\\n    uint256 indexed amount,\\n    uint256 indexed startTime,\\n    uint256 vestEndTime,\\n    uint256 unlockEndTime\\n  );\\n\\n  /**\\n   * @notice Emitted on when the vesting portion of an active grant is terminated.\\n   */\\n  event UnvestedTokensRevoked(\\n    uint256 indexed atTime,\\n    address indexed from,\\n    uint256 indexed quantity\\n  );\\n\\n  /**\\n   * @notice Emitted on withdwal of fully unlocked tokens.\\n   */\\n  event TokensClaimed(\\n    address indexed from,\\n    address indexed to,\\n    uint256 quantity\\n  );\\n\\n  /**\\n   * @notice This function is triggered when BridgedPolygonNORI is sent to this contract\\n   *\\n   * @dev Sending BridgedPolygonNORI to this contract triggers the tokensReceived hook defined by the ERC-777 standard\\n   * because this contract is a registered ERC777 tokens recipient.\\n   *\\n   * [See here for more](\\n   * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-777.md#erc777tokensrecipient-and-the-tokensreceived-hook)\\n   */\\n  function tokensReceived(\\n    address sender,\\n    address,\\n    address,\\n    uint256 amount,\\n    bytes calldata userData,\\n    bytes calldata operatorData\\n  ) external override {\\n    require(\\n      _msgSender() == address(_bridgedPolygonNori),\\n      \\\"lNORI: not BridgedPolygonNORI\\\"\\n    );\\n    require(\\n      hasRole(TOKEN_GRANTER_ROLE, sender),\\n      \\\"lNORI: sender is missing role TOKEN_GRANTER_ROLE\\\"\\n    );\\n    address to = abi.decode(userData, (address));\\n    require(to != address(0), \\\"lNORI: token send missing required userData\\\");\\n    _depositFor(amount, userData, operatorData);\\n  }\\n\\n  /**\\n   * @notice Claim unlocked tokens and withdraw them to *to* address.\\n   *\\n   * @dev This function burns `amount` of `LockedNORI` and transfers `amount`\\n   * of `BridgedPolygonNORI` from the `LockedNORI` contract's balance to\\n   * `_msgSender()`'s balance.\\n   *\\n   * Enforcement of the availability of wrapped and unlocked tokens\\n   * for the `_burn` call happens in `_beforeTokenTransfer`\\n   *\\n   * ##### Requirements:\\n   *\\n   * - Can only be used when the contract is not paused.\\n   */\\n  function withdrawTo(address recipient, uint256 amount)\\n    external\\n    returns (bool)\\n  {\\n    TokenGrant storage grant = _grants[_msgSender()];\\n    super._burn(_msgSender(), amount, \\\"\\\", \\\"\\\");\\n    _bridgedPolygonNori.send(\\n      // solhint-disable-previous-line check-send-result, because this isn't a solidity send\\n      recipient,\\n      amount,\\n      \\\"\\\"\\n    );\\n    grant.claimedAmount += amount;\\n    emit TokensClaimed(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Sets up a vesting + lockup schedule for recipient.\\n   *\\n   * @dev This function can be used as an alternative way to set up a grant that doesn't require\\n   * wrapping BridgedPolygonNORI first.\\n   *\\n   * ##### Requirements:\\n   *\\n   * - Can only be used when the contract is not paused.\\n   * - Can only be used when the caller has the `TOKEN_GRANTER_ROLE` role\\n   */\\n  function createGrant(\\n    uint256 amount,\\n    address recipient,\\n    uint256 startTime,\\n    uint256 vestEndTime,\\n    uint256 unlockEndTime,\\n    uint256 cliff1Time,\\n    uint256 cliff2Time,\\n    uint256 vestCliff1Amount,\\n    uint256 vestCliff2Amount,\\n    uint256 unlockCliff1Amount,\\n    uint256 unlockCliff2Amount\\n  ) external whenNotPaused onlyRole(TOKEN_GRANTER_ROLE) {\\n    bytes memory userData = abi.encode(\\n      recipient,\\n      startTime,\\n      vestEndTime,\\n      unlockEndTime,\\n      cliff1Time,\\n      cliff2Time,\\n      vestCliff1Amount,\\n      vestCliff2Amount,\\n      unlockCliff1Amount,\\n      unlockCliff2Amount\\n    );\\n    _createGrant(amount, userData);\\n  }\\n\\n  /**\\n   * @notice Truncates a batch of vesting grants of amounts in a single go\\n   *\\n   * @dev Transfers any unvested tokens in `fromAccounts`'s grant to `to` and reduces the total grant size. No change\\n   * is made to balances that have vested but not yet been claimed whether locked or not.\\n   *\\n   * The behavior of this function can be used in two specific ways:\\n   * - To revoke all remaining revokable tokens in a batch (regardless of time), set amount to 0 in the `amounts` array.\\n   * - To revoke tokens at the current block timestamp, set atTimes to 0 in the `amounts` array.\\n   *\\n   * ##### Requirements:\\n   *\\n   * - Can only be used when the caller has the `TOKEN_GRANTER_ROLE` role\\n   * - The requirements of _beforeTokenTransfer apply to this function\\n   * - fromAccounts.length == toAccounts.length == atTimes.length == amounts.length\\n   */\\n  function batchRevokeUnvestedTokenAmounts(\\n    address[] calldata fromAccounts,\\n    address[] calldata toAccounts,\\n    uint256[] calldata atTimes,\\n    uint256[] calldata amounts\\n  ) external whenNotPaused onlyRole(TOKEN_GRANTER_ROLE) {\\n    require(\\n      fromAccounts.length == toAccounts.length,\\n      \\\"lNORI: fromAccounts and toAccounts length mismatch\\\"\\n    );\\n    require(\\n      toAccounts.length == atTimes.length,\\n      \\\"lNORI: toAccounts and atTimes length mismatch\\\"\\n    );\\n    require(\\n      atTimes.length == amounts.length,\\n      \\\"lNORI: atTimes and amounts length mismatch\\\"\\n    );\\n    for (uint256 i = 0; i < fromAccounts.length; i++) {\\n      _revokeUnvestedTokens(\\n        fromAccounts[i],\\n        toAccounts[i],\\n        atTimes[i],\\n        amounts[i]\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice Number of unvested tokens that were revoked if any.\\n   */\\n  function quantityRevokedFrom(address account)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    TokenGrant storage grant = _grants[account];\\n    return grant.originalAmount - grant.grantAmount;\\n  }\\n\\n  /**\\n   * @notice Vested balance less any claimed amount at current block timestamp.\\n   */\\n  function vestedBalanceOf(address account) external view returns (uint256) {\\n    return _vestedBalanceOf(account, block.timestamp); // solhint-disable-line not-rely-on-time, this is time-dependent\\n  }\\n\\n  /**\\n   * @notice Returns all governing settings for multiple grants\\n   *\\n   * @dev If a grant does not exist for an account, the resulting grant will be zeroed out in the return value\\n   */\\n  function batchGetGrant(address[] calldata accounts)\\n    public\\n    view\\n    returns (TokenGrantDetail[] memory)\\n  {\\n    TokenGrantDetail[] memory grantDetails = new TokenGrantDetail[](\\n      accounts.length\\n    );\\n    for (uint256 i = 0; i < accounts.length; i++) {\\n      grantDetails[i] = getGrant(accounts[i]);\\n    }\\n    return grantDetails;\\n  }\\n\\n  /**\\n   * @notice Returns all governing settings for a grant.\\n   */\\n  function getGrant(address account)\\n    public\\n    view\\n    returns (TokenGrantDetail memory)\\n  {\\n    TokenGrant storage grant = _grants[account];\\n    return\\n      TokenGrantDetail(\\n        grant.grantAmount,\\n        account,\\n        grant.lockupSchedule.startTime,\\n        grant.vestingSchedule.endTime,\\n        grant.lockupSchedule.endTime,\\n        grant.lockupSchedule.cliffs[0].time,\\n        grant.lockupSchedule.cliffs[1].time,\\n        grant.vestingSchedule.cliffs[0].amount,\\n        grant.vestingSchedule.cliffs[1].amount,\\n        grant.lockupSchedule.cliffs[0].amount,\\n        grant.lockupSchedule.cliffs[1].amount,\\n        grant.claimedAmount,\\n        grant.originalAmount,\\n        grant.lastRevocationTime,\\n        grant.lastQuantityRevoked,\\n        grant.exists\\n      );\\n  }\\n\\n  // todo document expected initialzation state\\n  function initialize(BridgedPolygonNORI bridgedPolygonNoriAddress)\\n    public\\n    initializer\\n  {\\n    address[] memory operators = new address[](1);\\n    operators[0] = _msgSender();\\n    __Context_init_unchained();\\n    __ERC165_init_unchained();\\n    __AccessControl_init_unchained();\\n    __AccessControlEnumerable_init_unchained();\\n    __Pausable_init_unchained();\\n    __ERC777PresetPausablePermissioned_init_unchained();\\n    __ERC777_init_unchained(\\\"Locked NORI\\\", \\\"lNORI\\\", operators);\\n    _bridgedPolygonNori = bridgedPolygonNoriAddress;\\n    _ERC1820_REGISTRY.setInterfaceImplementer(\\n      address(this),\\n      ERC777_TOKENS_RECIPIENT_HASH,\\n      address(this)\\n    );\\n    _grantRole(TOKEN_GRANTER_ROLE, _msgSender());\\n  }\\n\\n  /**\\n   * @notice Overridden standard ERC777.burn that will always revert\\n   *\\n   * @dev This function is not currently supported from external callers so we override it so that we can revert.\\n   */\\n  function burn(uint256, bytes memory) public pure override {\\n    revert(\\\"lNORI: burning not supported\\\");\\n  }\\n\\n  /**\\n   * @notice Overridden standard ERC777.operatorBurn that will always revert\\n   *\\n   * @dev This function is not currently supported from external callers so we override it so that we can revert.\\n   */\\n  function operatorBurn(\\n    address,\\n    uint256,\\n    bytes memory,\\n    bytes memory\\n  ) public pure override {\\n    revert(\\\"lNORI: burning not supported\\\");\\n  }\\n\\n  /**\\n   * @notice Unlocked balance less any claimed amount at current block timestamp.\\n   */\\n  function unlockedBalanceOf(address account) public view returns (uint256) {\\n    return _unlockedBalanceOf(account, block.timestamp);\\n  }\\n\\n  /**\\n   * @notice Wraps minting of wrapper token and grant setup.\\n   *\\n   * @dev If `startTime` is zero no grant is set up. Satisfies situations where funding of the grant happens over time.\\n   *\\n   * @param amount uint256 Quantity of `_bridgedPolygonNori` to deposit\\n   * @param userData CreateTokenGrantParams or DepositForParams\\n   * @param operatorData bytes extra information provided by the operator (if any)\\n   */\\n  function _depositFor(\\n    uint256 amount,\\n    bytes calldata userData,\\n    bytes calldata operatorData\\n  ) internal returns (bool) {\\n    DepositForParams memory params = abi.decode(userData, (DepositForParams)); // todo error handling\\n    // If a startTime parameter is non-zero then set up a schedule\\n    // Validation happens inside _createGrant\\n    if (params.startTime > 0) {\\n      _createGrant(amount, userData);\\n    }\\n    require(\\n      _grants[params.recipient].exists,\\n      \\\"lNORI: Cannot deposit without a grant\\\"\\n    );\\n    super._mint(params.recipient, amount, userData, operatorData);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Sets up a vesting + lockup schedule for recipient (implementation).\\n   *\\n   * @dev All grants must include a lockup schedule and can optionally *also*\\n   * include a vesting schedule.  Tokens are withdrawble once they are\\n   * vested *and* unlocked.\\n   *\\n   * This will be invoked via the `tokensReceived` callback for cases\\n   * where we have the tokens in hand at the time we set up the grant.\\n   *\\n   * It is also callable externally (see `grantTo`) to handle cases\\n   * where tokens are incrementally deposited after the grant is established.\\n   */\\n  function _createGrant(uint256 amount, bytes memory userData) internal {\\n    CreateTokenGrantParams memory params = abi.decode(\\n      userData,\\n      (CreateTokenGrantParams)\\n    );\\n    require(\\n      address(params.recipient) != address(0),\\n      \\\"lNORI: Recipient cannot be zero address\\\"\\n    );\\n    require(\\n      !hasRole(TOKEN_GRANTER_ROLE, params.recipient),\\n      \\\"lNORI: Recipient cannot be grant admin\\\"\\n    );\\n    require(\\n      params.startTime < params.unlockEndTime,\\n      \\\"lNORI: unlockEndTime cannot be before startTime\\\"\\n    );\\n    require(\\n      block.timestamp < params.unlockEndTime,\\n      \\\"lNORI: unlockEndTime cannot be in the past\\\"\\n    );\\n    require(!_grants[params.recipient].exists, \\\"lNORI: Grant already exists\\\");\\n    TokenGrant storage grant = _grants[params.recipient];\\n    grant.grantAmount = amount;\\n    grant.originalAmount = amount;\\n    grant.exists = true;\\n    if (params.vestEndTime > params.startTime) {\\n      require(\\n        params.vestCliff1Amount >= params.unlockCliff1Amount ||\\n          params.vestCliff2Amount >= params.unlockCliff2Amount,\\n        \\\"lNORI: unlock cliff > vest cliff\\\"\\n      );\\n      grant.vestingSchedule.totalAmount = amount;\\n      grant.vestingSchedule.startTime = params.startTime;\\n      grant.vestingSchedule.endTime = params.vestEndTime;\\n      grant.vestingSchedule.addCliff(\\n        params.cliff1Time,\\n        params.vestCliff1Amount\\n      );\\n      grant.vestingSchedule.addCliff(\\n        params.cliff2Time,\\n        params.vestCliff2Amount\\n      );\\n    }\\n    grant.lockupSchedule.totalAmount = amount;\\n    grant.lockupSchedule.startTime = params.startTime;\\n    grant.lockupSchedule.endTime = params.unlockEndTime;\\n    grant.lockupSchedule.addCliff(params.cliff1Time, params.unlockCliff1Amount);\\n    grant.lockupSchedule.addCliff(params.cliff2Time, params.unlockCliff2Amount);\\n    emit TokenGrantCreated(\\n      params.recipient,\\n      amount,\\n      params.startTime,\\n      params.vestEndTime,\\n      params.unlockEndTime\\n    );\\n  }\\n\\n  /**\\n   * @notice Truncates a vesting grant.\\n   * This is an *admin* operation callable only by addresses having TOKEN_GRANTER_ROLE\\n   * (enforced in `batchRevokeUnvestedTokenAmounts`)\\n   *\\n   * @dev The implementation never updates underlying schedules (vesting or unlock)\\n   * but only the grant amount.  This avoids changing the behavior of the grant\\n   * before the point of revocation.  Anytime a vesting or unlock schedule is in\\n   * play the corresponding balance functions need to take care to never return\\n   * more than the grant amount less the claimed amount.\\n   *\\n   * Unlike in the `claim` function, here we burn `LockedNORI` from the grant holder but\\n   * send that `BridgedPolygonNORI` back to Nori's treasury or an address of Nori's\\n   * choosing (the *to* address).  The *claimedAmount* is not changed because this is\\n   * not a claim operation.\\n   */\\n  function _revokeUnvestedTokens(\\n    address from,\\n    address to,\\n    uint256 atTime,\\n    uint256 amount\\n  ) internal {\\n    require((atTime == 0 && amount > 0) || (atTime > 0 && amount == 0),\\n      \\\"lNORI: Must specify a revocation time or an amount not both\\\");\\n    TokenGrant storage grant = _grants[from];\\n    require(grant.exists, \\\"lNORI: no grant exists\\\");\\n    require(\\n      _hasVestingSchedule(from),\\n      \\\"lNORI: no vesting schedule for this grant\\\"\\n    );\\n    uint256 revocationTime = atTime == 0 && amount > 0\\n      ? block.timestamp\\n      : atTime; // atTime of zero indicates a revocation by amount\\n    require(\\n      revocationTime >= block.timestamp,\\n      \\\"lNORI: Revocation cannot be in the past\\\"\\n    );\\n    uint256 vestedBalance = grant.vestingSchedule.availableAmount(\\n      revocationTime\\n    );\\n    require(vestedBalance < grant.grantAmount, \\\"lNORI: tokens already vested\\\");\\n    uint256 revocableQuantity = grant.grantAmount - vestedBalance;\\n    uint256 quantityRevoked;\\n    // amount of zero indicates revocation by time.  Amount becomes all remaining tokens\\n    // at *atTime*\\n    if (amount > 0) {\\n      require(amount <= revocableQuantity, \\\"lNORI: too few unvested tokens\\\");\\n      quantityRevoked = amount;\\n    } else {\\n      quantityRevoked = revocableQuantity;\\n    }\\n    grant.grantAmount = grant.grantAmount - quantityRevoked;\\n    grant.lastRevocationTime = revocationTime;\\n    grant.lastQuantityRevoked = quantityRevoked;\\n    super._burn(from, quantityRevoked, \\\"\\\", \\\"\\\");\\n    _bridgedPolygonNori.send(\\n      // solhint-disable-previous-line check-send-result, because this isn't a solidity send\\n      to,\\n      quantityRevoked,\\n      \\\"\\\"\\n    );\\n    emit UnvestedTokensRevoked(revocationTime, from, quantityRevoked);\\n  }\\n\\n  /**\\n   * @notice Hook that is called before send, transfer, mint, and burn. Used used to disable transferring locked nori.\\n   *\\n   * @dev Follows the rules of hooks defined [here](\\n   *  https://docs.openzeppelin.com/contracts/4.x/extending-contracts#rules_of_hooks)\\n   *\\n   * ##### Requirements:\\n   *\\n   * - the contract must not be paused\\n   * - the recipient cannot be the zero address (e.g., no burning of tokens is allowed)\\n   * - One of the following must be true:\\n   *    - the operation is minting (which should ONLY occur when BridgedPolygonNORI is being wrapped via `_depositFor`)\\n   *    - the operation is a burn and _all_ of the following must be true:\\n   *      - the operator has TOKEN_GRANTER_ROLE\\n   *      - the operator is not operating on their own balance\\n   *      - the transfer amount is <= the sender's unlocked balance\\n   */\\n  function _beforeTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    bool isMinting = from == address(0);\\n    bool isBurning = to == address(0);\\n    bool operatorIsGrantAdmin = hasRole(TOKEN_GRANTER_ROLE, operator);\\n    bool operatorIsNotSender = operator != from;\\n    bool ownerHasSufficientUnlockedBalance = amount <= unlockedBalanceOf(from);\\n    if (isBurning && operatorIsNotSender && operatorIsGrantAdmin) {\\n      require(balanceOf(from) >= amount, \\\"lNORI: insufficient balance\\\");\\n    } else if (!isMinting) {\\n      require(ownerHasSufficientUnlockedBalance, \\\"lNORI: insufficient balance\\\");\\n    }\\n    return super._beforeTokenTransfer(operator, from, to, amount);\\n  }\\n\\n  /**\\n   * @notice Vested balance less any claimed amount at `atTime` (implementation)\\n   *\\n   * @dev Returns true if the there is a grant for *account* with a vesting schedule.\\n   */\\n  function _hasVestingSchedule(address account) private view returns (bool) {\\n    TokenGrant storage grant = _grants[account];\\n    return grant.exists && grant.vestingSchedule.startTime > 0;\\n  }\\n\\n  /**\\n   * @notice Vested balance less any claimed amount at `atTime` (implementation)\\n   *\\n   * @dev If any tokens have been revoked then the schedule (which doesn't get updated) may return more than the total\\n   * grant amount. This is done to preserve the behavior of the vesting schedule despite a reduction in the total\\n   * quantity of tokens vesting.  i.o.w The rate of vesting does not change after calling `revokeUnvestedTokens`\\n   */\\n  function _vestedBalanceOf(address account, uint256 atTime)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    TokenGrant storage grant = _grants[account];\\n    uint256 balance = this.balanceOf(account);\\n    if (grant.exists) {\\n      if (_hasVestingSchedule(account)) {\\n        balance =\\n          MathUpgradeable.min(\\n            grant.vestingSchedule.availableAmount(atTime),\\n            grant.grantAmount\\n          ) -\\n          grant.claimedAmount;\\n      } else {\\n        balance = grant.grantAmount - grant.claimedAmount;\\n      }\\n    }\\n    return balance;\\n  }\\n\\n  /**\\n   * @notice Unlocked balance less any claimed amount\\n   *\\n   * @dev If any tokens have been revoked then the schedule (which doesn't get updated) may return more than the total\\n   * grant amount. This is done to preserve the behavior of the unlock schedule despite a reduction in the total\\n   * quantity of tokens vesting.  i.o.w The rate of unlocking does not change after calling `revokeUnvestedTokens`\\n   */\\n  function _unlockedBalanceOf(address account, uint256 atTime)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    TokenGrant storage grant = _grants[account];\\n    uint256 balance = this.balanceOf(account);\\n    uint256 vestedBalance = _hasVestingSchedule(account)\\n      ? grant.vestingSchedule.availableAmount(atTime)\\n      : grant.grantAmount;\\n    if (grant.exists) {\\n      balance =\\n        MathUpgradeable.min(\\n          MathUpgradeable.min(\\n            vestedBalance,\\n            grant.lockupSchedule.availableAmount(atTime)\\n          ),\\n          grant.grantAmount\\n        ) -\\n        grant.claimedAmount;\\n    }\\n    return balance;\\n  }\\n\\n  function _beforeOperatorChange(address, uint256) internal pure override {\\n    revert(\\\"lNORI: operator actions disabled\\\");\\n  }\\n\\n  function send(\\n    address,\\n    uint256,\\n    bytes memory\\n  ) public pure override {\\n    revert(\\\"lNORI: send disabled\\\");\\n  }\\n\\n  function operatorSend(\\n    address,\\n    address,\\n    uint256,\\n    bytes memory,\\n    bytes memory\\n  ) public pure override {\\n    revert(\\\"lNORI: operatorSend disabled\\\");\\n  }\\n\\n  function transfer(address, uint256) public pure override returns (bool) {\\n    revert(\\\"lNORI: transfer disabled\\\");\\n  }\\n\\n  function transferFrom(\\n    address,\\n    address,\\n    uint256\\n  ) public pure override returns (bool) {\\n    revert(\\\"lNORI: transferFrom disabled\\\");\\n  }\\n\\n  function _beforeRoleChange(bytes32 role, address account) override internal virtual {\\n    super._beforeRoleChange(role, account);\\n    if (role == TOKEN_GRANTER_ROLE) {\\n        require (!_grants[account].exists, \\\"lNORI: Cannot assign role to a grant holder address\\\");\\n    }\\n  }\\n\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/token/ERC777/IERC777RecipientUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Recipient.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777RecipientUpgradeable {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/token/ERC777/IERC777Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/token/ERC777/IERC777SenderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Sender.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\\n *\\n * {IERC777} Token holders can be notified of operations performed on their\\n * tokens by having a contract implement this interface (contract holders can be\\n * their own implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777SenderUpgradeable {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\\n     * is conveyed by `to` being the zero address or not.\\n     *\\n     * This call occurs _before_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820RegistryUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC1820Registry.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820RegistryUpgradeable {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(\\n        address account,\\n        bytes32 _interfaceHash,\\n        address implementer\\n    ) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     * @param account Address of the contract for which to update the cache.\\n     * @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not.\\n     * If the result is not cached a direct lookup on the contract address is performed.\\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     * {updateERC165Cache} with the contract address.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/token/ERC777/ERC777Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC777/ERC777.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC777Upgradeable.sol\\\";\\nimport \\\"./IERC777RecipientUpgradeable.sol\\\";\\nimport \\\"./IERC777SenderUpgradeable.sol\\\";\\nimport \\\"../ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/IERC1820RegistryUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC777} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * Support for ERC20 is included in this contract, as specified by the EIP: both\\n * the ERC777 and ERC20 interfaces can be safely used when interacting with it.\\n * Both {IERC777-Sent} and {IERC20-Transfer} events are emitted on token\\n * movements.\\n *\\n * Additionally, the {IERC777-granularity} value is hard-coded to `1`, meaning that there\\n * are no special restrictions in the amount of tokens that created, moved, or\\n * destroyed. This makes integration with ERC20 applications seamless.\\n */\\ncontract ERC777Upgradeable is Initializable, ContextUpgradeable, IERC777Upgradeable, IERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    IERC1820RegistryUpgradeable internal constant _ERC1820_REGISTRY = IERC1820RegistryUpgradeable(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n    mapping(address => uint256) private _balances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    bytes32 private constant _TOKENS_SENDER_INTERFACE_HASH = keccak256(\\\"ERC777TokensSender\\\");\\n    bytes32 private constant _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\\\"ERC777TokensRecipient\\\");\\n\\n    // This isn't ever read from - it's only used to respond to the defaultOperators query.\\n    address[] private _defaultOperatorsArray;\\n\\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\\n    mapping(address => bool) private _defaultOperators;\\n\\n    // For each account, a mapping of its operators and revoked default operators.\\n    mapping(address => mapping(address => bool)) private _operators;\\n    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\\n\\n    // ERC20-allowances\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    /**\\n     * @dev `defaultOperators` may be an empty array.\\n     */\\n    function __ERC777_init(\\n        string memory name_,\\n        string memory symbol_,\\n        address[] memory defaultOperators_\\n    ) internal onlyInitializing {\\n        __ERC777_init_unchained(name_, symbol_, defaultOperators_);\\n    }\\n\\n    function __ERC777_init_unchained(\\n        string memory name_,\\n        string memory symbol_,\\n        address[] memory defaultOperators_\\n    ) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        _defaultOperatorsArray = defaultOperators_;\\n        for (uint256 i = 0; i < defaultOperators_.length; i++) {\\n            _defaultOperators[defaultOperators_[i]] = true;\\n        }\\n\\n        // register interfaces\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC777Token\\\"), address(this));\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC20Token\\\"), address(this));\\n    }\\n\\n    /**\\n     * @dev See {IERC777-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-decimals}.\\n     *\\n     * Always returns 18, as per the\\n     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\\n     */\\n    function decimals() public pure virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-granularity}.\\n     *\\n     * This implementation always returns `1`.\\n     */\\n    function granularity() public view virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override(IERC20Upgradeable, IERC777Upgradeable) returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\\n     */\\n    function balanceOf(address tokenHolder) public view virtual override(IERC20Upgradeable, IERC777Upgradeable) returns (uint256) {\\n        return _balances[tokenHolder];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-send}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function send(\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        _send(_msgSender(), recipient, amount, data, \\\"\\\", true);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\\n     * interface if it is a contract.\\n     *\\n     * Also emits a {Sent} event.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        require(recipient != address(0), \\\"ERC777: transfer to the zero address\\\");\\n\\n        address from = _msgSender();\\n\\n        _callTokensToSend(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _move(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _callTokensReceived(from, from, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-burn}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function burn(uint256 amount, bytes memory data) public virtual override {\\n        _burn(_msgSender(), amount, data, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC777-isOperatorFor}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) public view virtual override returns (bool) {\\n        return\\n            operator == tokenHolder ||\\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\\n            _operators[tokenHolder][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-authorizeOperator}.\\n     */\\n    function authorizeOperator(address operator) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC777: authorizing self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            delete _revokedDefaultOperators[_msgSender()][operator];\\n        } else {\\n            _operators[_msgSender()][operator] = true;\\n        }\\n\\n        emit AuthorizedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-revokeOperator}.\\n     */\\n    function revokeOperator(address operator) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC777: revoking self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            _revokedDefaultOperators[_msgSender()][operator] = true;\\n        } else {\\n            delete _operators[_msgSender()][operator];\\n        }\\n\\n        emit RevokedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-defaultOperators}.\\n     */\\n    function defaultOperators() public view virtual override returns (address[] memory) {\\n        return _defaultOperatorsArray;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorSend}.\\n     *\\n     * Emits {Sent} and {IERC20-Transfer} events.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    ) public virtual override {\\n        require(isOperatorFor(_msgSender(), sender), \\\"ERC777: caller is not an operator for holder\\\");\\n        _send(sender, recipient, amount, data, operatorData, true);\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorBurn}.\\n     *\\n     * Emits {Burned} and {IERC20-Transfer} events.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    ) public virtual override {\\n        require(isOperatorFor(_msgSender(), account), \\\"ERC777: caller is not an operator for holder\\\");\\n        _burn(account, amount, data, operatorData);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     *\\n     * Note that operator and allowance concepts are orthogonal: operators may\\n     * not have allowance, and accounts with allowance may not be operators\\n     * themselves.\\n     */\\n    function allowance(address holder, address spender) public view virtual override returns (uint256) {\\n        return _allowances[holder][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function approve(address spender, uint256 value) public virtual override returns (bool) {\\n        address holder = _msgSender();\\n        _approve(holder, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Note that operator and allowance concepts are orthogonal: operators cannot\\n     * call `transferFrom` (unless they have allowance), and accounts with\\n     * allowance cannot call `operatorSend` (unless they are operators).\\n     *\\n     * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\\n     */\\n    function transferFrom(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        require(recipient != address(0), \\\"ERC777: transfer to the zero address\\\");\\n        require(holder != address(0), \\\"ERC777: transfer from the zero address\\\");\\n\\n        address spender = _msgSender();\\n\\n        _callTokensToSend(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _spendAllowance(holder, spender, amount);\\n\\n        _move(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _callTokensReceived(spender, holder, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `operator`, `data` and `operatorData`.\\n     *\\n     * See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits {Minted} and {IERC20-Transfer} events.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    ) internal virtual {\\n        _mint(account, amount, userData, operatorData, true);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * If `requireReceptionAck` is set to true, and if a send hook is\\n     * registered for `account`, the corresponding function will be called with\\n     * `operator`, `data` and `operatorData`.\\n     *\\n     * See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits {Minted} and {IERC20-Transfer} events.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC777: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, amount);\\n\\n        // Update state variables\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n\\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, requireReceptionAck);\\n\\n        emit Minted(operator, account, amount, userData, operatorData);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Send tokens\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _send(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC777: send from the zero address\\\");\\n        require(to != address(0), \\\"ERC777: send to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\\n\\n        _move(operator, from, to, amount, userData, operatorData);\\n\\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\\n    }\\n\\n    /**\\n     * @dev Burn tokens\\n     * @param from address token holder address\\n     * @param amount uint256 amount of tokens to burn\\n     * @param data bytes extra information provided by the token holder\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _burn(\\n        address from,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC777: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\\n\\n        _beforeTokenTransfer(operator, from, address(0), amount);\\n\\n        // Update state variables\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC777: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Burned(operator, from, amount, data, operatorData);\\n        emit Transfer(from, address(0), amount);\\n    }\\n\\n    function _move(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    ) private {\\n        _beforeTokenTransfer(operator, from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC777: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Sent(operator, from, to, amount, userData, operatorData);\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_approve}.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function _approve(\\n        address holder,\\n        address spender,\\n        uint256 value\\n    ) internal virtual {\\n        require(holder != address(0), \\\"ERC777: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC777: approve to the zero address\\\");\\n\\n        _allowances[holder][spender] = value;\\n        emit Approval(holder, spender, value);\\n    }\\n\\n    /**\\n     * @dev Call from.tokensToSend() if the interface is registered\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _callTokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    ) private {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777SenderUpgradeable(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\\n        }\\n    }\\n\\n    /**\\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\\n     * tokensReceived() was not registered for the recipient\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _callTokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    ) private {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777RecipientUpgradeable(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\\n        } else if (requireReceptionAck) {\\n            require(!to.isContract(), \\\"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC777: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes\\n     * calls to {send}, {transfer}, {operatorSend}, minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[41] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"},\"contracts/ERC777PresetPausablePermissioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC777/ERC777Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\n\\ncontract ERC777PresetPausablePermissioned is\\n  ERC777Upgradeable,\\n  PausableUpgradeable,\\n  AccessControlEnumerableUpgradeable\\n{\\n  /**\\n   * @notice Role conferring the ability to pause and unpause mutable functions of the contract\\n   */\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n  /**\\n   * @notice Reserved storage slot for upgradeability\\n   *\\n   * @dev This empty reserved space is put in place to allow future versions to add new variables without shifting\\n   * down storage in the inheritance chain. See more [here](\\n   * https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)\\n   */\\n  uint256[50] private __gap;\\n\\n  /**\\n   * @notice An event emitted when a batch of transfers are bundled into a single transaction\\n   */\\n  event SentBatch(\\n    address indexed from,\\n    address[] recipients,\\n    uint256[] amounts,\\n    bytes[] userData,\\n    bytes[] operatorData,\\n    bool[] requireReceptionAck\\n  );\\n\\n  /**\\n   * @notice Batches multiple transfers into a single transaction\\n   *\\n   * @param recipients address[] list of recipient addresses\\n   * @param amounts uint256[] list of amounts to transfer\\n   * @param userData bytes[] list of extra information provided by the token holder (if any)\\n   * @param operatorData bytes[] list of extra information provided by the operator (if any)\\n   * @param requireReceptionAck list of requirements (if true, contract recipients are required to implement\\n   * ERC777TokensRecipient)\\n   *\\n   * Emits a SendBatch event.\\n   *\\n   * ##### Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  function batchSend(\\n    address[] memory recipients,\\n    uint256[] memory amounts,\\n    bytes[] memory userData,\\n    bytes[] memory operatorData,\\n    bool[] memory requireReceptionAck\\n  ) public {\\n    require(\\n      recipients.length == amounts.length,\\n      \\\"ERC777PresetPausablePermissioned: recipient and amount length mismatch\\\"\\n    );\\n    require(\\n      amounts.length == userData.length,\\n      \\\"ERC777PresetPausablePermissioned: amounts and userData length mismatch\\\"\\n    );\\n    require(\\n      userData.length == operatorData.length,\\n      \\\"ERC777PresetPausablePermissioned: userData and operatorData length mismatch\\\"\\n    );\\n    require(\\n      operatorData.length == requireReceptionAck.length,\\n      \\\"ERC777PresetPausablePermissioned: operatorData and requireReceptionAck length mismatch\\\"\\n    );\\n    for (uint256 i = 0; i < recipients.length; i++) {\\n      _send(\\n        _msgSender(),\\n        recipients[i],\\n        amounts[i],\\n        userData[i],\\n        operatorData[i],\\n        requireReceptionAck[i]\\n      );\\n    }\\n    emit SentBatch(\\n      _msgSender(),\\n      recipients,\\n      amounts,\\n      userData,\\n      operatorData,\\n      requireReceptionAck\\n    );\\n  }\\n\\n  /**\\n   * @notice See ERC777-approve for details [here](\\n   * https://docs.openzeppelin.com/contracts/4.x/api/token/erc777#ERC777-approve-address-uint256-)\\n   *\\n   * @dev This function is a wrapper around ERC777-approve.\\n   *\\n   * ##### Requirements:\\n   *\\n   * - The contract must not be paused.\\n   * - Accounts cannot have allowance issued by their operators.\\n   * - If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically\\n   * equivalent to an infinite approval.\\n   */\\n  function approve(address spender, uint256 value)\\n    public\\n    virtual\\n    override\\n    whenNotPaused\\n    returns (bool)\\n  {\\n    _beforeOperatorChange(spender, value);\\n    return super.approve(spender, value);\\n  }\\n\\n  /**\\n   * @notice Authorize an operator to spend on behalf of the sender\\n   *\\n   * @dev See IERC777-authorizeOperator for details [here](\\n   * https://docs.openzeppelin.com/contracts/4.x/api/token/erc777#IERC777-authorizeOperator-address-)\\n   *\\n   * ##### Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  function authorizeOperator(address operator) public virtual override {\\n    _beforeOperatorChange(operator, 0);\\n    return super.authorizeOperator(operator);\\n  }\\n\\n  /**\\n   * @notice Revoke an operator to disable their ability to spend on behalf of the sender\\n   *\\n   * @dev See IERC777-authorizeOperator for details [here](\\n   * https://docs.openzeppelin.com/contracts/4.x/api/token/erc777#IERC777-authorizeOperator-address-)\\n   *\\n   * ##### Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  function revokeOperator(address operator) public virtual override {\\n    _beforeOperatorChange(operator, 0);\\n    return super.revokeOperator(operator);\\n  }\\n\\n  /**\\n   * @notice Pauses all functions that can mutate state\\n   *\\n   * @dev Used to effectively freeze a contract so that no state updates can occur\\n   *\\n   * ##### Requirements:\\n   *\\n   * - The caller must have the `PAUSER_ROLE`.\\n   */\\n  function pause() public onlyRole(PAUSER_ROLE) {\\n    _pause();\\n  }\\n\\n  /**\\n   * @notice Unpauses **all** token transfers.\\n   *\\n   * @dev\\n   *\\n   * ##### Requirements:\\n   *\\n   * - The caller must have the `PAUSER_ROLE`.\\n   */\\n  function unpause() public onlyRole(PAUSER_ROLE) {\\n    _unpause();\\n  }\\n\\n  /**\\n   * @notice Returns the balances of a batch of addresses in a single call\\n   */\\n  function balanceOfBatch(address[] memory accounts)\\n    public\\n    view\\n    returns (uint256[] memory)\\n  {\\n    uint256[] memory batchBalances = new uint256[](accounts.length);\\n    for (uint256 i = 0; i < accounts.length; ++i) {\\n      batchBalances[i] = balanceOf(accounts[i]);\\n    }\\n    return batchBalances;\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __ERC777PresetPausablePermissioned_init_unchained()\\n    internal\\n    onlyInitializing\\n  {\\n    _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    _grantRole(PAUSER_ROLE, _msgSender());\\n  }\\n\\n  /**\\n   * @notice Hook that is called before granting/revoking operator allowances\\n   *\\n   * @dev This overrides the behavior of `approve`, `authorizeOperator, and `revokeOperator` with pausable behavior.\\n   * When the contract is paused, these functions will not be callable. Follows the rules of hooks defined\\n   * [here](https://docs.openzeppelin.com/contracts/4.x/extending-contracts#rules_of_hooks)\\n   *\\n   * ##### Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  function _beforeOperatorChange(address, uint256)\\n    internal\\n    virtual\\n    whenNotPaused\\n  {} // solhint-disable-line no-empty-blocks\\n\\n  /**\\n   * @notice Hook that is called before granting/revoking roles via `grantRole`, `revokeRole`, `renounceRole`\\n   *\\n   * @dev This overrides the behavior of `_grantRole`, `_setupRole`, `_revokeRole`, and `_renounceRole` with pausable\\n   * behavior. When the contract is paused, these functions will not be callable. Follows the rules of hooks\\n   * defined [here](https://docs.openzeppelin.com/contracts/4.x/extending-contracts#rules_of_hooks)\\n   *\\n   * ##### Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  function _beforeRoleChange(bytes32, address) internal virtual whenNotPaused {} // solhint-disable-line no-empty-blocks\\n\\n  /**\\n   * @notice A hook that is called before a token transfer occurs.\\n   *\\n   * @dev When the contract is paused, these functions will not be callable. Follows the rules of hooks defined\\n   * [here](https://docs.openzeppelin.com/contracts/4.x/extending-contracts#rules_of_hooks)\\n   *\\n   * ##### Requirements:\\n   *\\n   * - The contract must not be paused.\\n   */\\n  function _beforeTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual override whenNotPaused {\\n    super._beforeTokenTransfer(operator, from, to, amount);\\n  }\\n\\n  /**\\n   * @notice Grants a role to an account.\\n   *\\n   * @dev Grants `role` to `account` if the `_beforeRoleGranted` hook is satisfied\\n   *\\n   * ##### Requirements:\\n   *\\n   * - The contract must not be paused.\\n   * - The requirements of _beforeRoleGranted_ must be satisfied.\\n   */\\n  function _grantRole(bytes32 role, address account) internal virtual override {\\n    _beforeRoleChange(role, account);\\n    super._grantRole(role, account);\\n  }\\n\\n  /**\\n   * @notice Revokes a role from an account.\\n   *\\n   * @dev Revokes `role` from `account` if the `_beforeRoleGranted` hook is satisfied\\n   *\\n   * ##### Requirements:\\n   *\\n   * - The contract must not be paused.\\n   * - The requirements of _beforeRoleGranted_ must be satisfied.\\n   */\\n  function _revokeRole(bytes32 role, address account)\\n    internal\\n    virtual\\n    override\\n  {\\n    _beforeRoleChange(role, account);\\n    super._revokeRole(role, account);\\n  }\\n}\\n\"},\"contracts/NORI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"./ERC777PresetPausablePermissioned.sol\\\";\\n\\ncontract NORI is ERC777PresetPausablePermissioned {\\n  function initialize() public virtual initializer {\\n    __NORI_init();\\n    _mint(\\n      _msgSender(),\\n      500_000_000 * 10**18, // 500,000,000 NORI\\n      \\\"\\\",\\n      \\\"\\\"\\n    );\\n  }\\n\\n  /**\\n   * @notice Initializer variant that embeds the linearized calls to all parent initializers.\\n   * @dev Follows the multiple inheritance initializer rules defined [here](\\n   * https://docs.openzeppelin.com/contracts/3.x/upgradeable#multiple-inheritance). As a consequence,\\n   * calling two of these init functions can potentially initialize the same contract twice.\\n   */\\n  function __NORI_init() internal onlyInitializing {\\n    // solhint-disable-previous-line func-name-mixedcase\\n    __Context_init_unchained();\\n    __ERC165_init_unchained();\\n    __AccessControl_init_unchained();\\n    __AccessControlEnumerable_init_unchained();\\n    __Pausable_init_unchained();\\n    __ERC777PresetPausablePermissioned_init_unchained();\\n    __ERC777_init_unchained(\\\"NORI\\\", \\\"NORI\\\", new address[](0));\\n    __NORI_init_unchained();\\n  }\\n\\n  /**\\n   * @notice Initializer variant that does **not** embed linearized calls to any parent initializers.\\n   * @dev Follows the multiple inheritance initializer rules defined [here](\\n   * https://docs.openzeppelin.com/contracts/3.x/upgradeable#multiple-inheritance). As a consequence,\\n   * calling two of these init functions can potentially initialize the same contract twice.\\n   */\\n  function __NORI_init_unchained() internal onlyInitializing {\\n    // solhint-disable-previous-line no-empty-blocks, func-name-mixedcase\\n  }\\n}\\n\"},\"contracts/BridgedPolygonNORI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"./NORI.sol\\\";\\n\\ncontract BridgedPolygonNORI is NORI {\\n  bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR_ROLE\\\");\\n\\n  /**\\n   * @notice called when token is deposited on root chain\\n   * @dev Should be callable only by ChildChainManager\\n   * Should handle deposit by minting the required amount for user\\n   * Make sure minting is done only by this function\\n   * @param user user address for whom deposit is being done\\n   * @param depositData abi encoded amount\\n   */\\n  function deposit(address user, bytes calldata depositData)\\n    external\\n    onlyRole(DEPOSITOR_ROLE)\\n  {\\n    uint256 amount = abi.decode(depositData, (uint256));\\n    _mint(user, amount, depositData, \\\"\\\");\\n  }\\n\\n  /**\\n   * @notice called when user wants to withdraw tokens back to root chain\\n   * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\\n   * @param amount amount of tokens to withdraw\\n   */\\n  function withdraw(uint256 amount) external {\\n    _burn(_msgSender(), amount, \\\"\\\", \\\"\\\");\\n  }\\n\\n  /**\\n   * @notice initializes the BridgedPolygonNORI contract\\n   */\\n  function initialize(address childChainManagerProxy) public initializer {\\n    __BridgedPolygonNORI_init(childChainManagerProxy);\\n  }\\n\\n  /**\\n   * @notice overrides the NORI initializer so that it reverts and is never initialized with a call to the mint function\\n   */\\n  function initialize() public override initializer {\\n    revert(\\\"BridgedPolygonNORI: disallowed\\\");\\n  }\\n\\n  /**\\n   * @notice Initializer variant that embeds the linearized calls to all parent initializers.\\n   * @dev Follows the multiple inheritance initializer rules defined [here](\\n   * https://docs.openzeppelin.com/contracts/3.x/upgradeable#multiple-inheritance). As a consequence,\\n   * calling two of these init functions can potentially initialize the same contract twice.\\n   */\\n  function __BridgedPolygonNORI_init(\\n    // solhint-disable-previous-line func-name-mixedcase\\n    address childChainManagerProxy\\n  ) internal onlyInitializing {\\n    __Context_init_unchained();\\n    __ERC165_init_unchained();\\n    __AccessControl_init_unchained();\\n    __AccessControlEnumerable_init_unchained();\\n    __Pausable_init_unchained();\\n    __ERC777PresetPausablePermissioned_init_unchained();\\n    __ERC777_init_unchained(\\\"NORI\\\", \\\"NORI\\\", new address[](0));\\n    __NORI_init_unchained();\\n    __BridgedPolygonNORI_init_unchained(childChainManagerProxy);\\n  }\\n\\n  /**\\n   * @notice Initializer variant that does **not** embed linearized calls to any parent initializers.\\n   * @dev Follows the multiple inheritance initializer rules defined [here](\\n   * https://docs.openzeppelin.com/contracts/3.x/upgradeable#multiple-inheritance). As a consequence,\\n   * calling two of these init functions can potentially initialize the same contract twice.\\n   */\\n  function __BridgedPolygonNORI_init_unchained(\\n    // solhint-disable-previous-line func-name-mixedcase\\n    address childChainManagerProxy\\n  ) internal onlyInitializing {\\n    _grantRole(DEPOSITOR_ROLE, childChainManagerProxy);\\n  }\\n}\\n\"},\"contracts/ScheduleUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\n\\nstruct Cliff {\\n  uint256 time;\\n  uint256 amount;\\n}\\n\\nstruct Schedule {\\n  uint256 startTime;\\n  uint256 endTime;\\n  uint256 totalAmount;\\n  mapping(uint256 => Cliff) cliffs;\\n  uint256 cliffCount;\\n  uint256 totalCliffAmount;\\n}\\n\\n/**\\n * @dev Library encapsulating the logic around timed release schedules with cliffs.\\n *\\n * Supports an arbitrary number of stepwise cliff releases beyond which the remaining\\n * amount is released linearly from the time of the final cliff to the end date.\\n *\\n * All time parameters are in unixtime for ease of comparison with block.timestamp\\n * although all methods on ScheduleUtils take *atTime* as a parameter and do not\\n * directly reason about the current block timestamp.\\n *\\n * See also {ScheduleTestHarness.sol} for a simple use of this library\\n * for unit testing purposes.\\n *\\n * NOTE: All methods are internal so this library gets inlined into the consuming\\n * contract and does not need to be deployed separately.\\n *\\n * Designed to be used i.e.:\\n *\\n * ```\\n *  using ScheduleUtils for Schedule;\\n *\\n *  mapping(address => Schedule) schedules = Schedules;\\n *  Schedule s = schedules[account];\\n *  s.startTime = 1644436100;\\n *  s.endTime = 1645436100;\\n *  s.totalAmount = 1000000;\\n *  s.addCliff(1644436200, 50000);\\n *  s.amountAvailable(1644436200);\\n * ```\\n *\\n */\\nlibrary ScheduleUtils {\\n  /**\\n   * @dev Adds a cliff defined by *time* and *amount* to *schedule*\\n   *\\n   * *time* must be >= any existing cliff, >= schedule.startTime and <= schedule.endTime\\n   * *amount* must be <= (schedule.totalAmount - total of existing cliffs)\\n   */\\n  function addCliff(\\n    Schedule storage schedule,\\n    uint256 time,\\n    uint256 amount\\n  ) internal {\\n    uint256 cliffCount = schedule.cliffCount;\\n    if (schedule.cliffCount == 0) {\\n      require(\\n        time >= schedule.startTime,\\n        \\\"ScheduleUtils: Cliff before schedule start\\\"\\n      );\\n    } else {\\n      require(\\n        time >= schedule.cliffs[cliffCount - 1].time,\\n        \\\"ScheduleUtils: Cliffs not chronological\\\"\\n      );\\n    }\\n    require(\\n      time <= schedule.endTime,\\n      \\\"ScheduleUtils: Cliffs cannot end after schedule\\\"\\n    );\\n    require(\\n      schedule.totalCliffAmount + amount <= schedule.totalAmount,\\n      \\\"ScheduleUtils: Cliff amounts exceed total\\\"\\n    );\\n    Cliff storage cliff = schedule.cliffs[cliffCount];\\n    cliff.time = time;\\n    cliff.amount = amount;\\n    schedule.cliffCount += 1;\\n    schedule.totalCliffAmount += amount;\\n  }\\n\\n  /**\\n   * @dev The total of unlocked cliff amounts in *schedule* at time *atTime*\\n   */\\n  function cliffAmountsAvailable(Schedule storage schedule, uint256 atTime)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 available = 0;\\n    uint256 cliffCount = schedule.cliffCount;\\n    for (uint256 i = 0; i < cliffCount; i++) {\\n      if (atTime >= schedule.cliffs[i].time) {\\n        available += schedule.cliffs[i].amount;\\n      }\\n    }\\n    return MathUpgradeable.min(schedule.totalAmount, available);\\n  }\\n\\n  /**\\n   * @dev The total amount of the linear (post-cliff) release available at *atTime*\\n   *\\n   * Will always be zero prior to the final cliff time and then increases linearly\\n   * util *schedule.endTime*.\\n   */\\n  function linearReleaseAmountAvailable(\\n    Schedule storage schedule,\\n    uint256 atTime\\n  ) internal view returns (uint256) {\\n    uint256 rampTotalAmount;\\n    // could happen if unvested tokens were revoked\\n    if (schedule.totalAmount >= schedule.totalCliffAmount) {\\n      rampTotalAmount = schedule.totalAmount - schedule.totalCliffAmount;\\n    } // else 0\\n    if (atTime >= schedule.endTime) {\\n      return rampTotalAmount;\\n    }\\n    uint256 rampStartTime = schedule.startTime;\\n    if (schedule.cliffCount > 0) {\\n      rampStartTime = schedule.cliffs[schedule.cliffCount - 1].time;\\n    }\\n    uint256 rampTotalTime = schedule.endTime - rampStartTime;\\n    return\\n      atTime < rampStartTime\\n        ? 0\\n        : (rampTotalAmount * (atTime - rampStartTime)) / rampTotalTime;\\n  }\\n\\n  /**\\n   * @dev The total amount available at *atTime*\\n   *\\n   * Will always be zero prior to *schedule.startTime* and *amount*\\n   * after *schedule.endTime*.\\n   *\\n   * Equivalent to cliffAmountsAvailable + linearReleaseAmountAvailable.\\n   */\\n  function availableAmount(Schedule storage schedule, uint256 atTime)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return\\n      cliffAmountsAvailable(schedule, atTime) +\\n      linearReleaseAmountAvailable(schedule, atTime);\\n  }\\n}\\n\"}}}","address":"0x0000000000000000000000000000000000000000","bytecode":"0x608060405234801561001057600080fd5b50615097806100206000396000f3fe608060405234801561001057600080fd5b506004361061027e5760003560e01c806370a082311161015c578063a217fddf116100ce578063d95b637111610087578063d95b6371146105bd578063dd62ed3e146105d0578063e63ab1e914610609578063fad8b32a1461061e578063fc673c4f14610631578063fe9d93031461064457600080fd5b8063a217fddf14610549578063a9059cbb14610551578063bf31dbf414610564578063c4d66de814610584578063ca15c87314610597578063d547741f146105aa57600080fd5b8063959b8c3f11610120578063959b8c3f146104d557806395d89b41146104e85780639952d6e4146104f05780639bd9bbc6146105035780639e3f3cac146105165780639f916c211461052957600080fd5b806370a08231146104535780638456cb591461047c57806384955c88146104845780639010d07c1461049757806391d14854146104c257600080fd5b80632f2ff15d116101f5578063521189a9116101b9578063521189a9146103df578063556f0dc7146104065780635c975abb1461040d57806362ad1b8314610418578063633d9be01461042b57806366cf8bce1461044057600080fd5b80632f2ff15d14610382578063313ce5671461039557806336568abe146103a45780633f4ba83a146103b7578063458c738e146103bf57600080fd5b80630e2d1a2a116102475780630e2d1a2a146102fd57806318160ddd1461031e578063205c28781461032657806323b872dd14610339578063248a9ca31461034c578063271c6e1a1461036f57600080fd5b806223de291461028357806301ffc9a71461029857806306e48538146102c057806306fdde03146102d5578063095ea7b3146102ea575b600080fd5b610296610291366004614033565b610652565b005b6102ab6102a63660046140e3565b6107cb565b60405190151581526020015b60405180910390f35b6102c86107f6565b6040516102b79190614151565b6102dd610858565b6040516102b791906141bc565b6102ab6102f83660046141cf565b6108e1565b61031061030b3660046141fb565b610927565b6040519081526020016102b7565b603454610310565b6102ab6103343660046141cf565b610933565b6102ab610347366004614218565b610a42565b61031061035a366004614259565b600090815260c9602052604090206001015490565b61029661037d366004614272565b610a8d565b6102966103903660046142f1565b610b4e565b604051601281526020016102b7565b6102966103b23660046142f1565b610b79565b610296610bf7565b6103d26103cd366004614427565b610c1b565b6040516102b7919061448b565b6103107fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b81565b6001610310565b60655460ff166102ab565b61029661042636600461450d565b610cdc565b61031060008051602061502283398151915281565b61029661044e3660046146e3565b610d24565b6103106104613660046141fb565b6001600160a01b031660009081526033602052604090205490565b610296611003565b6103106104923660046141fb565b611024565b6104aa6104a53660046147a7565b611030565b6040516001600160a01b0390911681526020016102b7565b6102ab6104d03660046142f1565b611048565b6102966104e33660046141fb565b611073565b6102dd611087565b6102966104fe36600461480d565b611096565b6102966105113660046148bc565b6112a8565b6103106105243660046141fb565b6112e7565b61053c610537366004614914565b611314565b6040516102b79190614a10565b610310600081565b6102ab61055f3660046141cf565b6113d9565b6105776105723660046141fb565b611424565b6040516102b79190614a5f565b6102966105923660046141fb565b611520565b6103106105a5366004614259565b611776565b6102966105b83660046142f1565b61178d565b6102ab6105cb366004614a6e565b6117b3565b6103106105de366004614a6e565b6001600160a01b039182166000908152603b6020908152604080832093909416825291909152205490565b61031060008051602061504283398151915281565b61029661062c3660046141fb565b611854565b61029661063f366004614a9c565b611868565b61029661063f366004614b1b565b610160546001600160a01b0316336001600160a01b0316146106bb5760405162461bcd60e51b815260206004820152601d60248201527f6c4e4f52493a206e6f742042726964676564506f6c79676f6e4e4f524900000060448201526064015b60405180910390fd5b6106d360008051602061502283398151915289611048565b6107385760405162461bcd60e51b815260206004820152603060248201527f6c4e4f52493a2073656e646572206973206d697373696e6720726f6c6520544f60448201526f4b454e5f4752414e5445525f524f4c4560801b60648201526084016106b2565b6000610746848601866141fb565b90506001600160a01b0381166107b25760405162461bcd60e51b815260206004820152602b60248201527f6c4e4f52493a20746f6b656e2073656e64206d697373696e672072657175697260448201526a656420757365724461746160a81b60648201526084016106b2565b6107bf86868686866118b0565b50505050505050505050565b60006001600160e01b03198216635a05180f60e01b14806107f057506107f082611a0d565b92915050565b6060603780548060200260200160405190810160405280929190818152602001828054801561084e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610830575b5050505050905090565b60606035805461086790614b61565b80601f016020809104026020016040519081016040528092919081815260200182805461089390614b61565b801561084e5780601f106108b55761010080835404028352916020019161084e565b820191906000526020600020905b8154815290600101906020018083116108c357509395945050505050565b60006108ef60655460ff1690565b1561090c5760405162461bcd60e51b81526004016106b290614b9b565b6109168383611a42565b6109208383611a8a565b9392505050565b60006107f08242611aa2565b33600081815261015f60209081526040808320815180840183528481528251938401909252838352929361096a9290918691611b8a565b61016054604051634decdde360e11b81526001600160a01b03868116600483015260248201869052606060448301526000606483015290911690639bd9bbc690608401600060405180830381600087803b1580156109c757600080fd5b505af11580156109db573d6000803e3d6000fd5b505050508281600d0160008282546109f39190614bdb565b90915550506040518381526001600160a01b0385169033907fa86305abc2db271df4609aa86a8d044bc11fb36939841bfdad6c1ab2b26e94719060200160405180910390a35060019392505050565b60405162461bcd60e51b815260206004820152601c60248201527f6c4e4f52493a207472616e7366657246726f6d2064697361626c65640000000060448201526000906064016106b2565b60655460ff1615610ab05760405162461bcd60e51b81526004016106b290614b9b565b600080516020615022833981519152610ac98133611d4c565b604080516001600160a01b038d1660208201529081018b9052606081018a90526080810189905260a0810188905260c0810187905260e08101869052610100810185905261012081018490526101408101839052600090610160016040516020818303038152906040529050610b3f8d82611db0565b50505050505050505050505050565b600082815260c96020526040902060010154610b6a8133611d4c565b610b748383612195565b505050565b6001600160a01b0381163314610be95760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106b2565b610bf382826121a9565b5050565b600080516020615042833981519152610c108133611d4c565b610c186121bd565b50565b6060600082516001600160401b03811115610c3857610c38614321565b604051908082528060200260200182016040528015610c61578160200160208202803683370190505b50905060005b8351811015610cd557610ca8848281518110610c8557610c85614bf3565b60200260200101516001600160a01b031660009081526033602052604090205490565b828281518110610cba57610cba614bf3565b6020908102919091010152610cce81614c09565b9050610c67565b5092915050565b60405162461bcd60e51b815260206004820152601c60248201527f6c4e4f52493a206f70657261746f7253656e642064697361626c65640000000060448201526064016106b2565b8351855114610d985760405162461bcd60e51b8152602060048201526046602482015260008051602061500283398151915260448201527f3a20726563697069656e7420616e6420616d6f756e74206c656e677468206d696064820152650e6dac2e8c6d60d31b608482015260a4016106b2565b8251845114610e0c5760405162461bcd60e51b8152602060048201526046602482015260008051602061500283398151915260448201527f3a20616d6f756e747320616e64207573657244617461206c656e677468206d696064820152650e6dac2e8c6d60d31b608482015260a4016106b2565b8151835114610e855760405162461bcd60e51b815260206004820152604b602482015260008051602061500283398151915260448201527f3a20757365724461746120616e64206f70657261746f7244617461206c656e6760648201526a0e8d040dad2e6dac2e8c6d60ab1b608482015260a4016106b2565b8051825114610f095760405162461bcd60e51b8152602060048201526056602482015260008051602061500283398151915260448201527f3a206f70657261746f724461746120616e6420726571756972655265636570746064820152750d2dedc82c6d640d8cadccee8d040dad2e6dac2e8c6d60531b608482015260a4016106b2565b60005b8551811015610fb257610fa033878381518110610f2b57610f2b614bf3565b6020026020010151878481518110610f4557610f45614bf3565b6020026020010151878581518110610f5f57610f5f614bf3565b6020026020010151878681518110610f7957610f79614bf3565b6020026020010151878781518110610f9357610f93614bf3565b6020026020010151612250565b80610faa81614c09565b915050610f0c565b50336001600160a01b03167fd5865ae34f92a2d6a803fa13140b8165046f54e61e68560b26950c62a668c6b68686868686604051610ff4959493929190614c77565b60405180910390a25050505050565b60008051602061504283398151915261101c8133611d4c565b610c1861233c565b60006107f08242612394565b600082815260fb602052604081206109209083612485565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61107e816000611a42565b610c1881612491565b60606036805461086790614b61565b60655460ff16156110b95760405162461bcd60e51b81526004016106b290614b9b565b6000805160206150228339815191526110d28133611d4c565b87861461113c5760405162461bcd60e51b815260206004820152603260248201527f6c4e4f52493a2066726f6d4163636f756e747320616e6420746f4163636f756e6044820152710e8e640d8cadccee8d040dad2e6dac2e8c6d60731b60648201526084016106b2565b8584146111a15760405162461bcd60e51b815260206004820152602d60248201527f6c4e4f52493a20746f4163636f756e747320616e6420617454696d6573206c6560448201526c0dccee8d040dad2e6dac2e8c6d609b1b60648201526084016106b2565b8382146112035760405162461bcd60e51b815260206004820152602a60248201527f6c4e4f52493a20617454696d657320616e6420616d6f756e7473206c656e67746044820152690d040dad2e6dac2e8c6d60b31b60648201526084016106b2565b60005b888110156107bf576112968a8a8381811061122357611223614bf3565b905060200201602081019061123891906141fb565b89898481811061124a5761124a614bf3565b905060200201602081019061125f91906141fb565b88888581811061127157611271614bf3565b9050602002013587878681811061128a5761128a614bf3565b905060200201356125ae565b806112a081614c09565b915050611206565b60405162461bcd60e51b81526020600482015260146024820152731b1393d4924e881cd95b9908191a5cd8589b195960621b60448201526064016106b2565b6001600160a01b038116600090815261015f60205260408120600c810154600e8201546109209190614d0c565b60606000826001600160401b0381111561133057611330614321565b60405190808252806020026020018201604052801561136957816020015b611356613e60565b81526020019060019003908161134e5790505b50905060005b838110156113d1576113a185858381811061138c5761138c614bf3565b905060200201602081019061057291906141fb565b8282815181106113b3576113b3614bf3565b602002602001018190525080806113c990614c09565b91505061136f565b509392505050565b60405162461bcd60e51b815260206004820152601860248201527f6c4e4f52493a207472616e736665722064697361626c6564000000000000000060448201526000906064016106b2565b61142c613e60565b506001600160a01b0316600081815261015f60209081526040808320815161020081018352600c82015481528084019590955260068101548583015260018082015460608701526007820154608087015284805260098201808552838620805460a0890152828752818652848720805460c08a01528780526003850180885286892085015460e08b01528489528752948720830154610100890152820154610120880152948190529390925290910154610140830152600d810154610160830152600e81015461018083015260108101546101a083015260118101546101c0830152600f015460ff1615156101e082015290565b600054610100900460ff1661153b5760005460ff161561153f565b303b155b6115a25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b2565b600054610100900460ff161580156115c4576000805461ffff19166101011790555b6040805160018082528183019092526000916020808301908036833701905050905033816000815181106115fa576115fa614bf3565b60200260200101906001600160a01b031690816001600160a01b031681525050611622612967565b61162a612967565b611632612967565b61163a612967565b611642612990565b61164a6129c3565b6116956040518060400160405280600b81526020016a4c6f636b6564204e4f524960a81b815250604051806040016040528060058152602001646c4e4f524960d81b81525083612a0d565b61016080546001600160a01b0319166001600160a01b0385161790556040516329965a1d60e01b815230600482018190527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b15801561172a57600080fd5b505af115801561173e573d6000803e3d6000fd5b5050505061176060008051602061502283398151915261175b3390565b612195565b508015610bf3576000805461ff00191690555050565b600081815260fb602052604081206107f090612bf7565b600082815260c960205260409020600101546117a98133611d4c565b610b7483836121a9565b6000816001600160a01b0316836001600160a01b0316148061181e57506001600160a01b03831660009081526038602052604090205460ff16801561181e57506001600160a01b038083166000908152603a602090815260408083209387168352929052205460ff16155b806109205750506001600160a01b0390811660009081526039602090815260408083209490931682529290925290205460ff1690565b61185f816000611a42565b610c1881612c01565b60405162461bcd60e51b815260206004820152601c60248201527f6c4e4f52493a206275726e696e67206e6f7420737570706f727465640000000060448201526064016106b2565b6000806118bf85870187614d23565b60208101519091501561190c5761190c8787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611db092505050565b80516001600160a01b0316600090815261015f60205260409020600f015460ff166119875760405162461bcd60e51b815260206004820152602560248201527f6c4e4f52493a2043616e6e6f74206465706f73697420776974686f757420612060448201526419dc985b9d60da1b60648201526084016106b2565b611a0081600001518888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a9150899081908401838280828437600092019190915250612d1c92505050565b5060019695505050505050565b60006001600160e01b03198216637965db0b60e01b14806107f057506301ffc9a760e01b6001600160e01b03198316146107f0565b60405162461bcd60e51b815260206004820181905260248201527f6c4e4f52493a206f70657261746f7220616374696f6e732064697361626c656460448201526064016106b2565b600033611a98818585612d30565b5060019392505050565b6001600160a01b038216600081815261015f602052604080822090516370a0823160e01b815260048101939093529091829030906370a0823190602401602060405180830381865afa158015611afc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b209190614d7a565b600f83015490915060ff1615611b8257611b3985612e57565b15611b6b57600d820154611b5a611b508487612e88565b84600c0154612ea8565b611b649190614d0c565b9050611b82565b81600d015482600c0154611b7f9190614d0c565b90505b949350505050565b6001600160a01b038416611beb5760405162461bcd60e51b815260206004820152602260248201527f4552433737373a206275726e2066726f6d20746865207a65726f206164647265604482015261737360f01b60648201526084016106b2565b33611bfb81866000878787612ebe565b611c088186600087612fe5565b6001600160a01b03851660009081526033602052604090205484811015611c7d5760405162461bcd60e51b815260206004820152602360248201527f4552433737373a206275726e20616d6f756e7420657863656564732062616c616044820152626e636560e81b60648201526084016106b2565b6001600160a01b0386166000908152603360205260408120868303905560348054879290611cac908490614d0c565b92505081905550856001600160a01b0316826001600160a01b03167fa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a4098878787604051611cfa93929190614d93565b60405180910390a36040518581526000906001600160a01b038816907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a3505050505050565b611d568282611048565b610bf357611d6e816001600160a01b03166014613125565b611d79836020613125565b604051602001611d8a929190614dbe565b60408051601f198184030181529082905262461bcd60e51b82526106b2916004016141bc565b600081806020019051810190611dc69190614e43565b80519091506001600160a01b0316611e305760405162461bcd60e51b815260206004820152602760248201527f6c4e4f52493a20526563697069656e742063616e6e6f74206265207a65726f206044820152666164647265737360c81b60648201526084016106b2565b611e4c6000805160206150228339815191528260000151611048565b15611ea85760405162461bcd60e51b815260206004820152602660248201527f6c4e4f52493a20526563697069656e742063616e6e6f74206265206772616e746044820152651030b236b4b760d11b60648201526084016106b2565b8060600151816020015110611f175760405162461bcd60e51b815260206004820152602f60248201527f6c4e4f52493a20756e6c6f636b456e6454696d652063616e6e6f74206265206260448201526e65666f726520737461727454696d6560881b60648201526084016106b2565b80606001514210611f7d5760405162461bcd60e51b815260206004820152602a60248201527f6c4e4f52493a20756e6c6f636b456e6454696d652063616e6e6f7420626520696044820152691b881d1a19481c185cdd60b21b60648201526084016106b2565b80516001600160a01b0316600090815261015f60205260409020600f015460ff1615611feb5760405162461bcd60e51b815260206004820152601b60248201527f6c4e4f52493a204772616e7420616c726561647920657869737473000000000060448201526064016106b2565b80516001600160a01b0316600090815261015f6020908152604091829020600c8101869055600e8101869055600f8101805460ff191660011790559083015191830151909110156120e5578161010001518260c0015110158061205757508161012001518260e0015110155b6120a35760405162461bcd60e51b815260206004820181905260248201527f6c4e4f52493a20756e6c6f636b20636c696666203e207665737420636c69666660448201526064016106b2565b600281018490556020820151815560408201516001820155608082015160c08301516120d09183916132c0565b60a082015160e08301516120e59183916132c0565b600881018490556020820151600682019081556060830151600783015560808301516101008401516121189291906132c0565b60a08201516101208301516121319160068401916132c0565b81602001518483600001516001600160a01b03167f17161516b6ce34594617177a800b150a86ddee02c06993a73ef000a02367d11985604001518660600151604051612187929190918252602082015260400190565b60405180910390a450505050565b61219f82826134f4565b610bf3828261359c565b6121b382826134f4565b610bf382826135be565b60655460ff166122065760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106b2565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0386166122b15760405162461bcd60e51b815260206004820152602260248201527f4552433737373a2073656e642066726f6d20746865207a65726f206164647265604482015261737360f01b60648201526084016106b2565b6001600160a01b0385166123075760405162461bcd60e51b815260206004820181905260248201527f4552433737373a2073656e6420746f20746865207a65726f206164647265737360448201526064016106b2565b33612316818888888888612ebe565b6123248188888888886135e0565b61233381888888888888613752565b50505050505050565b60655460ff161561235f5760405162461bcd60e51b81526004016106b290614b9b565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586122333390565b6001600160a01b038216600081815261015f602052604080822090516370a0823160e01b815260048101939093529091829030906370a0823190602401602060405180830381865afa1580156123ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124129190614d7a565b9050600061241f86612e57565b61242d5782600c0154612437565b6124378386612e88565b600f84015490915060ff161561247c57600d83015461246f61246583612460600688018a612e88565b612ea8565b85600c0154612ea8565b6124799190614d0c565b91505b50949350505050565b60006109208383613917565b6001600160a01b03811633036124f55760405162461bcd60e51b8152602060048201526024808201527f4552433737373a20617574686f72697a696e672073656c66206173206f70657260448201526330ba37b960e11b60648201526084016106b2565b6001600160a01b03811660009081526038602052604090205460ff161561254657336000908152603a602090815260408083206001600160a01b03851684529091529020805460ff19169055612575565b3360009081526039602090815260408083206001600160a01b03851684529091529020805460ff191660011790555b60405133906001600160a01b038316907ff4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f990600090a350565b811580156125bc5750600081115b806125d057506000821180156125d0575080155b6126425760405162461bcd60e51b815260206004820152603b60248201527f6c4e4f52493a204d75737420737065636966792061207265766f636174696f6e60448201527f2074696d65206f7220616e20616d6f756e74206e6f7420626f7468000000000060648201526084016106b2565b6001600160a01b038416600090815261015f60205260409020600f81015460ff166126a85760405162461bcd60e51b81526020600482015260166024820152756c4e4f52493a206e6f206772616e742065786973747360501b60448201526064016106b2565b6126b185612e57565b61270f5760405162461bcd60e51b815260206004820152602960248201527f6c4e4f52493a206e6f2076657374696e67207363686564756c6520666f7220746044820152681a1a5cc819dc985b9d60ba1b60648201526084016106b2565b60008315801561271f5750600083115b612729578361272b565b425b90504281101561278d5760405162461bcd60e51b815260206004820152602760248201527f6c4e4f52493a205265766f636174696f6e2063616e6e6f7420626520696e20746044820152661a19481c185cdd60ca1b60648201526084016106b2565b60006127998383612e88565b905082600c015481106127ee5760405162461bcd60e51b815260206004820152601c60248201527f6c4e4f52493a20746f6b656e7320616c7265616479207665737465640000000060448201526064016106b2565b60008184600c01546128009190614d0c565b905060008515612861578186111561285a5760405162461bcd60e51b815260206004820152601e60248201527f6c4e4f52493a20746f6f2066657720756e76657374656420746f6b656e73000060448201526064016106b2565b5084612864565b50805b8085600c01546128749190614d0c565b600c86015560108501849055601185018190556040805160208082018352600080835283519182019093529182526128af918b918491611b8a565b61016054604051634decdde360e11b81526001600160a01b038a8116600483015260248201849052606060448301526000606483015290911690639bd9bbc690608401600060405180830381600087803b15801561290c57600080fd5b505af1158015612920573d6000803e3d6000fd5b5050505080896001600160a01b0316857f0bbe3f9ae306d75ae6df08cd4a79ac5c6eae93ffae7d7e52f2859bf27592519d60405160405180910390a4505050505050505050565b600054610100900460ff1661298e5760405162461bcd60e51b81526004016106b290614ed1565b565b600054610100900460ff166129b75760405162461bcd60e51b81526004016106b290614ed1565b6065805460ff19169055565b600054610100900460ff166129ea5760405162461bcd60e51b81526004016106b290614ed1565b6129f5600033612195565b61298e60008051602061504283398151915233612195565b600054610100900460ff16612a345760405162461bcd60e51b81526004016106b290614ed1565b8251612a47906035906020860190613ee8565b508151612a5b906036906020850190613ee8565b508051612a6f906037906020840190613f6c565b5060005b8151811015612ad857600160386000848481518110612a9457612a94614bf3565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580612ad081614c09565b915050612a73565b506040516329965a1d60e01b815230600482018190527fac7fbab5f54a3ca8194167523c6753bfeb96a445279294b6125b68cce217705460248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b158015612b5257600080fd5b505af1158015612b66573d6000803e3d6000fd5b50506040516329965a1d60e01b815230600482018190527faea199e31a596269b42cdafd93407f14436db6e4cad65417994c2eb37381e05a60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad2492506329965a1d9150606401600060405180830381600087803b158015612be357600080fd5b505af1158015612333573d6000803e3d6000fd5b60006107f0825490565b336001600160a01b03821603612c635760405162461bcd60e51b815260206004820152602160248201527f4552433737373a207265766f6b696e672073656c66206173206f70657261746f6044820152603960f91b60648201526084016106b2565b6001600160a01b03811660009081526038602052604090205460ff1615612cb757336000908152603a602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612ce3565b3360009081526039602090815260408083206001600160a01b03851684529091529020805460ff191690555b60405133906001600160a01b038316907f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa190600090a350565b612d2a848484846001613941565b50505050565b6001600160a01b038316612d945760405162461bcd60e51b815260206004820152602560248201527f4552433737373a20617070726f76652066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016106b2565b6001600160a01b038216612df65760405162461bcd60e51b815260206004820152602360248201527f4552433737373a20617070726f766520746f20746865207a65726f206164647260448201526265737360e81b60648201526084016106b2565b6001600160a01b038381166000818152603b602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038116600090815261015f60205260408120600f81015460ff168015610920575054151592915050565b6000612e948383613a87565b612e9e8484613b46565b6109209190614bdb565b6000818310612eb75781610920565b5090919050565b60405163555ddc6560e11b81526001600160a01b03861660048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe8956024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa158015612f3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f639190614f1c565b90506001600160a01b0381161561233357604051633ad5cbc160e11b81526001600160a01b038216906375ab978290612faa908a908a908a908a908a908a90600401614f39565b600060405180830381600087803b158015612fc457600080fd5b505af1158015612fd8573d6000803e3d6000fd5b5050505050505050505050565b6001600160a01b038381161590831615600061300f60008051602061502283398151915288611048565b90506001600160a01b038781169087161415600061302c88611024565b861115905083801561303b5750815b80156130445750825b156130bc5785613069896001600160a01b031660009081526033602052604090205490565b10156130b75760405162461bcd60e51b815260206004820152601b60248201527f6c4e4f52493a20696e73756666696369656e742062616c616e6365000000000060448201526064016106b2565b61310e565b8461310e578061310e5760405162461bcd60e51b815260206004820152601b60248201527f6c4e4f52493a20696e73756666696369656e742062616c616e6365000000000060448201526064016106b2565b61311a89898989613bbc565b505050505050505050565b60606000613134836002614f93565b61313f906002614bdb565b6001600160401b0381111561315657613156614321565b6040519080825280601f01601f191660200182016040528015613180576020820181803683370190505b509050600360fc1b8160008151811061319b5761319b614bf3565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106131ca576131ca614bf3565b60200101906001600160f81b031916908160001a90535060006131ee846002614f93565b6131f9906001614bdb565b90505b6001811115613271576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061322d5761322d614bf3565b1a60f81b82828151811061324357613243614bf3565b60200101906001600160f81b031916908160001a90535060049490941c9361326a81614fb2565b90506131fc565b5083156109205760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106b2565b600483015460008190036133375783548310156133325760405162461bcd60e51b815260206004820152602a60248201527f5363686564756c655574696c733a20436c696666206265666f72652073636865604482015269191d5b19481cdd185c9d60b21b60648201526084016106b2565b6133b9565b600384016000613348600184614d0c565b8152602001908152602001600020600001548310156133b95760405162461bcd60e51b815260206004820152602760248201527f5363686564756c655574696c733a20436c69666673206e6f74206368726f6e6f6044820152661b1bd9da58d85b60ca1b60648201526084016106b2565b83600101548311156134255760405162461bcd60e51b815260206004820152602f60248201527f5363686564756c655574696c733a20436c696666732063616e6e6f7420656e6460448201526e206166746572207363686564756c6560881b60648201526084016106b2565b836002015482856005015461343a9190614bdb565b111561349a5760405162461bcd60e51b815260206004820152602960248201527f5363686564756c655574696c733a20436c69666620616d6f756e747320657863604482015268195959081d1bdd185b60ba1b60648201526084016106b2565b600081815260038501602052604081208481556001808201859055600487018054929391929091906134cd908490614bdb565b92505081905550828560050160008282546134e89190614bdb565b90915550505050505050565b6134fe8282613be4565b6000805160206150228339815191528203610bf3576001600160a01b038116600090815261015f60205260409020600f015460ff1615610bf35760405162461bcd60e51b815260206004820152603360248201527f6c4e4f52493a2043616e6e6f742061737369676e20726f6c6520746f2061206760448201527272616e7420686f6c646572206164647265737360681b60648201526084016106b2565b6135a68282613c07565b600082815260fb60205260409020610b749082613c8d565b6135c88282613ca2565b600082815260fb60205260409020610b749082613d09565b6135ec86868686612fe5565b6001600160a01b038516600090815260336020526040902054838110156136655760405162461bcd60e51b815260206004820152602760248201527f4552433737373a207472616e7366657220616d6f756e7420657863656564732060448201526662616c616e636560c81b60648201526084016106b2565b6001600160a01b0380871660009081526033602052604080822087850390559187168152908120805486929061369c908490614bdb565b92505081905550846001600160a01b0316866001600160a01b0316886001600160a01b03167f06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc826146779878787876040516136f493929190614d93565b60405180910390a4846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405161374191815260200190565b60405180910390a350505050505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b6024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa1580156137d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137f79190614f1c565b90506001600160a01b03811615613873576040516223de2960e01b81526001600160a01b038216906223de299061383c908b908b908b908b908b908b90600401614f39565b600060405180830381600087803b15801561385657600080fd5b505af115801561386a573d6000803e3d6000fd5b5050505061390d565b811561390d576001600160a01b0386163b1561390d5760405162461bcd60e51b815260206004820152604d60248201527f4552433737373a20746f6b656e20726563697069656e7420636f6e747261637460448201527f20686173206e6f20696d706c656d656e74657220666f7220455243373737546f60648201526c1ad95b9cd49958da5c1a595b9d609a1b608482015260a4016106b2565b5050505050505050565b600082600001828154811061392e5761392e614bf3565b9060005260206000200154905092915050565b6001600160a01b0385166139975760405162461bcd60e51b815260206004820181905260248201527f4552433737373a206d696e7420746f20746865207a65726f206164647265737360448201526064016106b2565b336139a58160008888612fe5565b84603460008282546139b79190614bdb565b90915550506001600160a01b038616600090815260336020526040812080548792906139e4908490614bdb565b909155506139fa90508160008888888888613752565b856001600160a01b0316816001600160a01b03167f2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d878787604051613a4193929190614d93565b60405180910390a36040518581526001600160a01b038716906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611d3c565b6000808360050154846002015410613ab05783600501548460020154613aad9190614d0c565b90505b83600101548310613ac25790506107f0565b8354600485015415613afa5784600301600060018760040154613ae59190614d0c565b81526020019081526020016000206000015490505b6000818660010154613b0c9190614d0c565b9050818510613b395780613b208387614d0c565b613b2a9085614f93565b613b349190614fc9565b613b3c565b60005b9695505050505050565b60048201546000908190815b81811015613ba45760008181526003870160205260409020548510613b92576000818152600387016020526040902060010154613b8f9084614bdb565b92505b80613b9c81614c09565b915050613b52565b50613bb3856002015483612ea8565b95945050505050565b60655460ff1615613bdf5760405162461bcd60e51b81526004016106b290614b9b565b612d2a565b60655460ff1615610bf35760405162461bcd60e51b81526004016106b290614b9b565b613c118282611048565b610bf357600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff19166001179055613c493390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610920836001600160a01b038416613d1e565b613cac8282611048565b15610bf357600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610920836001600160a01b038416613d6d565b6000818152600183016020526040812054613d65575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107f0565b5060006107f0565b60008181526001830160205260408120548015613e56576000613d91600183614d0c565b8554909150600090613da590600190614d0c565b9050818114613e0a576000866000018281548110613dc557613dc5614bf3565b9060005260206000200154905080876000018481548110613de857613de8614bf3565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613e1b57613e1b614feb565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506107f0565b60009150506107f0565b6040518061020001604052806000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b828054613ef490614b61565b90600052602060002090601f016020900481019282613f165760008555613f5c565b82601f10613f2f57805160ff1916838001178555613f5c565b82800160010185558215613f5c579182015b82811115613f5c578251825591602001919060010190613f41565b50613f68929150613fc1565b5090565b828054828255906000526020600020908101928215613f5c579160200282015b82811115613f5c57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613f8c565b5b80821115613f685760008155600101613fc2565b6001600160a01b0381168114610c1857600080fd5b60008083601f840112613ffd57600080fd5b5081356001600160401b0381111561401457600080fd5b60208301915083602082850101111561402c57600080fd5b9250929050565b60008060008060008060008060c0898b03121561404f57600080fd5b883561405a81613fd6565b9750602089013561406a81613fd6565b9650604089013561407a81613fd6565b95506060890135945060808901356001600160401b038082111561409d57600080fd5b6140a98c838d01613feb565b909650945060a08b01359150808211156140c257600080fd5b506140cf8b828c01613feb565b999c989b5096995094979396929594505050565b6000602082840312156140f557600080fd5b81356001600160e01b03198116811461092057600080fd5b600081518084526020808501945080840160005b838110156141465781516001600160a01b031687529582019590820190600101614121565b509495945050505050565b602081526000610920602083018461410d565b60005b8381101561417f578181015183820152602001614167565b83811115612d2a5750506000910152565b600081518084526141a8816020860160208601614164565b601f01601f19169290920160200192915050565b6020815260006109206020830184614190565b600080604083850312156141e257600080fd5b82356141ed81613fd6565b946020939093013593505050565b60006020828403121561420d57600080fd5b813561092081613fd6565b60008060006060848603121561422d57600080fd5b833561423881613fd6565b9250602084013561424881613fd6565b929592945050506040919091013590565b60006020828403121561426b57600080fd5b5035919050565b60008060008060008060008060008060006101608c8e03121561429457600080fd5b8b359a5060208c01356142a681613fd6565b9a9d9a9c505050506040890135986060810135986080820135985060a0820135975060c0820135965060e0820135955061010082013594506101208201359350610140909101359150565b6000806040838503121561430457600080fd5b82359150602083013561431681613fd6565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b038111828210171561435a5761435a614321565b60405290565b604051601f8201601f191681016001600160401b038111828210171561438857614388614321565b604052919050565b60006001600160401b038211156143a9576143a9614321565b5060051b60200190565b600082601f8301126143c457600080fd5b813560206143d96143d483614390565b614360565b82815260059290921b840181019181810190868411156143f857600080fd5b8286015b8481101561441c57803561440f81613fd6565b83529183019183016143fc565b509695505050505050565b60006020828403121561443957600080fd5b81356001600160401b0381111561444f57600080fd5b611b82848285016143b3565b600081518084526020808501945080840160005b838110156141465781518752958201959082019060010161446f565b602081526000610920602083018461445b565b600082601f8301126144af57600080fd5b81356001600160401b038111156144c8576144c8614321565b6144db601f8201601f1916602001614360565b8181528460208386010111156144f057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561452557600080fd5b853561453081613fd6565b9450602086013561454081613fd6565b93506040860135925060608601356001600160401b038082111561456357600080fd5b61456f89838a0161449e565b9350608088013591508082111561458557600080fd5b506145928882890161449e565b9150509295509295909350565b600082601f8301126145b057600080fd5b813560206145c06143d483614390565b82815260059290921b840181019181810190868411156145df57600080fd5b8286015b8481101561441c57803583529183019183016145e3565b600082601f83011261460b57600080fd5b8135602061461b6143d483614390565b82815260059290921b8401810191818101908684111561463a57600080fd5b8286015b8481101561441c5780356001600160401b0381111561465d5760008081fd5b61466b8986838b010161449e565b84525091830191830161463e565b600082601f83011261468a57600080fd5b8135602061469a6143d483614390565b82815260059290921b840181019181810190868411156146b957600080fd5b8286015b8481101561441c57803580151581146146d65760008081fd5b83529183019183016146bd565b600080600080600060a086880312156146fb57600080fd5b85356001600160401b038082111561471257600080fd5b61471e89838a016143b3565b9650602088013591508082111561473457600080fd5b61474089838a0161459f565b9550604088013591508082111561475657600080fd5b61476289838a016145fa565b9450606088013591508082111561477857600080fd5b61478489838a016145fa565b9350608088013591508082111561479a57600080fd5b5061459288828901614679565b600080604083850312156147ba57600080fd5b50508035926020909101359150565b60008083601f8401126147db57600080fd5b5081356001600160401b038111156147f257600080fd5b6020830191508360208260051b850101111561402c57600080fd5b6000806000806000806000806080898b03121561482957600080fd5b88356001600160401b038082111561484057600080fd5b61484c8c838d016147c9565b909a50985060208b013591508082111561486557600080fd5b6148718c838d016147c9565b909850965060408b013591508082111561488a57600080fd5b6148968c838d016147c9565b909650945060608b01359150808211156148af57600080fd5b506140cf8b828c016147c9565b6000806000606084860312156148d157600080fd5b83356148dc81613fd6565b92506020840135915060408401356001600160401b038111156148fe57600080fd5b61490a8682870161449e565b9150509250925092565b6000806020838503121561492757600080fd5b82356001600160401b0381111561493d57600080fd5b614949858286016147c9565b90969095509350505050565b80518252602081015161497360208401826001600160a01b03169052565b5060408181015190830152606080820151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a080820151908301526101c080820151908301526101e08082015180151582850152612d2a565b6020808252825182820181905260009190848201906040850190845b81811015614a5357614a3f838551614955565b928401926102009290920191600101614a2c565b50909695505050505050565b61020081016107f08284614955565b60008060408385031215614a8157600080fd5b8235614a8c81613fd6565b9150602083013561431681613fd6565b60008060008060808587031215614ab257600080fd5b8435614abd81613fd6565b93506020850135925060408501356001600160401b0380821115614ae057600080fd5b614aec8883890161449e565b93506060870135915080821115614b0257600080fd5b50614b0f8782880161449e565b91505092959194509250565b60008060408385031215614b2e57600080fd5b8235915060208301356001600160401b03811115614b4b57600080fd5b614b578582860161449e565b9150509250929050565b600181811c90821680614b7557607f821691505b602082108103614b9557634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115614bee57614bee614bc5565b500190565b634e487b7160e01b600052603260045260246000fd5b600060018201614c1b57614c1b614bc5565b5060010190565b600081518084526020808501808196508360051b8101915082860160005b85811015614c6a578284038952614c58848351614190565b98850198935090840190600101614c40565b5091979650505050505050565b60a081526000614c8a60a083018861410d565b602083820381850152614c9d828961445b565b91508382036040850152614cb18288614c22565b91508382036060850152614cc58287614c22565b8481036080860152855180825282870193509082019060005b81811015614cfc578451151583529383019391830191600101614cde565b50909a9950505050505050505050565b600082821015614d1e57614d1e614bc5565b500390565b600060408284031215614d3557600080fd5b604051604081018181106001600160401b0382111715614d5757614d57614321565b6040528235614d6581613fd6565b81526020928301359281019290925250919050565b600060208284031215614d8c57600080fd5b5051919050565b838152606060208201526000614dac6060830185614190565b8281036040840152613b3c8185614190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614df6816017850160208801614164565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614e27816028840160208801614164565b01602801949350505050565b8051614e3e81613fd6565b919050565b60006101408284031215614e5657600080fd5b614e5e614337565b614e6783614e33565b81526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152508091505092915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215614f2e57600080fd5b815161092081613fd6565b6001600160a01b0387811682528681166020830152851660408201526060810184905260c060808201819052600090614f7490830185614190565b82810360a0840152614f868185614190565b9998505050505050505050565b6000816000190483118215151615614fad57614fad614bc5565b500290565b600081614fc157614fc1614bc5565b506000190190565b600082614fe657634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603160045260246000fdfe4552433737375072657365745061757361626c655065726d697373696f6e6564a52f07bb8dc8df886598eb50edeaba2b8e45715237ed244354b60ea04d0390b865d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa26469706673582212205875699fe59728351a72546aac76c4af76dabb440c090412ecff6f41c62c3fa464736f6c634300080d0033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061027e5760003560e01c806370a082311161015c578063a217fddf116100ce578063d95b637111610087578063d95b6371146105bd578063dd62ed3e146105d0578063e63ab1e914610609578063fad8b32a1461061e578063fc673c4f14610631578063fe9d93031461064457600080fd5b8063a217fddf14610549578063a9059cbb14610551578063bf31dbf414610564578063c4d66de814610584578063ca15c87314610597578063d547741f146105aa57600080fd5b8063959b8c3f11610120578063959b8c3f146104d557806395d89b41146104e85780639952d6e4146104f05780639bd9bbc6146105035780639e3f3cac146105165780639f916c211461052957600080fd5b806370a08231146104535780638456cb591461047c57806384955c88146104845780639010d07c1461049757806391d14854146104c257600080fd5b80632f2ff15d116101f5578063521189a9116101b9578063521189a9146103df578063556f0dc7146104065780635c975abb1461040d57806362ad1b8314610418578063633d9be01461042b57806366cf8bce1461044057600080fd5b80632f2ff15d14610382578063313ce5671461039557806336568abe146103a45780633f4ba83a146103b7578063458c738e146103bf57600080fd5b80630e2d1a2a116102475780630e2d1a2a146102fd57806318160ddd1461031e578063205c28781461032657806323b872dd14610339578063248a9ca31461034c578063271c6e1a1461036f57600080fd5b806223de291461028357806301ffc9a71461029857806306e48538146102c057806306fdde03146102d5578063095ea7b3146102ea575b600080fd5b610296610291366004614033565b610652565b005b6102ab6102a63660046140e3565b6107cb565b60405190151581526020015b60405180910390f35b6102c86107f6565b6040516102b79190614151565b6102dd610858565b6040516102b791906141bc565b6102ab6102f83660046141cf565b6108e1565b61031061030b3660046141fb565b610927565b6040519081526020016102b7565b603454610310565b6102ab6103343660046141cf565b610933565b6102ab610347366004614218565b610a42565b61031061035a366004614259565b600090815260c9602052604090206001015490565b61029661037d366004614272565b610a8d565b6102966103903660046142f1565b610b4e565b604051601281526020016102b7565b6102966103b23660046142f1565b610b79565b610296610bf7565b6103d26103cd366004614427565b610c1b565b6040516102b7919061448b565b6103107fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b81565b6001610310565b60655460ff166102ab565b61029661042636600461450d565b610cdc565b61031060008051602061502283398151915281565b61029661044e3660046146e3565b610d24565b6103106104613660046141fb565b6001600160a01b031660009081526033602052604090205490565b610296611003565b6103106104923660046141fb565b611024565b6104aa6104a53660046147a7565b611030565b6040516001600160a01b0390911681526020016102b7565b6102ab6104d03660046142f1565b611048565b6102966104e33660046141fb565b611073565b6102dd611087565b6102966104fe36600461480d565b611096565b6102966105113660046148bc565b6112a8565b6103106105243660046141fb565b6112e7565b61053c610537366004614914565b611314565b6040516102b79190614a10565b610310600081565b6102ab61055f3660046141cf565b6113d9565b6105776105723660046141fb565b611424565b6040516102b79190614a5f565b6102966105923660046141fb565b611520565b6103106105a5366004614259565b611776565b6102966105b83660046142f1565b61178d565b6102ab6105cb366004614a6e565b6117b3565b6103106105de366004614a6e565b6001600160a01b039182166000908152603b6020908152604080832093909416825291909152205490565b61031060008051602061504283398151915281565b61029661062c3660046141fb565b611854565b61029661063f366004614a9c565b611868565b61029661063f366004614b1b565b610160546001600160a01b0316336001600160a01b0316146106bb5760405162461bcd60e51b815260206004820152601d60248201527f6c4e4f52493a206e6f742042726964676564506f6c79676f6e4e4f524900000060448201526064015b60405180910390fd5b6106d360008051602061502283398151915289611048565b6107385760405162461bcd60e51b815260206004820152603060248201527f6c4e4f52493a2073656e646572206973206d697373696e6720726f6c6520544f60448201526f4b454e5f4752414e5445525f524f4c4560801b60648201526084016106b2565b6000610746848601866141fb565b90506001600160a01b0381166107b25760405162461bcd60e51b815260206004820152602b60248201527f6c4e4f52493a20746f6b656e2073656e64206d697373696e672072657175697260448201526a656420757365724461746160a81b60648201526084016106b2565b6107bf86868686866118b0565b50505050505050505050565b60006001600160e01b03198216635a05180f60e01b14806107f057506107f082611a0d565b92915050565b6060603780548060200260200160405190810160405280929190818152602001828054801561084e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610830575b5050505050905090565b60606035805461086790614b61565b80601f016020809104026020016040519081016040528092919081815260200182805461089390614b61565b801561084e5780601f106108b55761010080835404028352916020019161084e565b820191906000526020600020905b8154815290600101906020018083116108c357509395945050505050565b60006108ef60655460ff1690565b1561090c5760405162461bcd60e51b81526004016106b290614b9b565b6109168383611a42565b6109208383611a8a565b9392505050565b60006107f08242611aa2565b33600081815261015f60209081526040808320815180840183528481528251938401909252838352929361096a9290918691611b8a565b61016054604051634decdde360e11b81526001600160a01b03868116600483015260248201869052606060448301526000606483015290911690639bd9bbc690608401600060405180830381600087803b1580156109c757600080fd5b505af11580156109db573d6000803e3d6000fd5b505050508281600d0160008282546109f39190614bdb565b90915550506040518381526001600160a01b0385169033907fa86305abc2db271df4609aa86a8d044bc11fb36939841bfdad6c1ab2b26e94719060200160405180910390a35060019392505050565b60405162461bcd60e51b815260206004820152601c60248201527f6c4e4f52493a207472616e7366657246726f6d2064697361626c65640000000060448201526000906064016106b2565b60655460ff1615610ab05760405162461bcd60e51b81526004016106b290614b9b565b600080516020615022833981519152610ac98133611d4c565b604080516001600160a01b038d1660208201529081018b9052606081018a90526080810189905260a0810188905260c0810187905260e08101869052610100810185905261012081018490526101408101839052600090610160016040516020818303038152906040529050610b3f8d82611db0565b50505050505050505050505050565b600082815260c96020526040902060010154610b6a8133611d4c565b610b748383612195565b505050565b6001600160a01b0381163314610be95760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106b2565b610bf382826121a9565b5050565b600080516020615042833981519152610c108133611d4c565b610c186121bd565b50565b6060600082516001600160401b03811115610c3857610c38614321565b604051908082528060200260200182016040528015610c61578160200160208202803683370190505b50905060005b8351811015610cd557610ca8848281518110610c8557610c85614bf3565b60200260200101516001600160a01b031660009081526033602052604090205490565b828281518110610cba57610cba614bf3565b6020908102919091010152610cce81614c09565b9050610c67565b5092915050565b60405162461bcd60e51b815260206004820152601c60248201527f6c4e4f52493a206f70657261746f7253656e642064697361626c65640000000060448201526064016106b2565b8351855114610d985760405162461bcd60e51b8152602060048201526046602482015260008051602061500283398151915260448201527f3a20726563697069656e7420616e6420616d6f756e74206c656e677468206d696064820152650e6dac2e8c6d60d31b608482015260a4016106b2565b8251845114610e0c5760405162461bcd60e51b8152602060048201526046602482015260008051602061500283398151915260448201527f3a20616d6f756e747320616e64207573657244617461206c656e677468206d696064820152650e6dac2e8c6d60d31b608482015260a4016106b2565b8151835114610e855760405162461bcd60e51b815260206004820152604b602482015260008051602061500283398151915260448201527f3a20757365724461746120616e64206f70657261746f7244617461206c656e6760648201526a0e8d040dad2e6dac2e8c6d60ab1b608482015260a4016106b2565b8051825114610f095760405162461bcd60e51b8152602060048201526056602482015260008051602061500283398151915260448201527f3a206f70657261746f724461746120616e6420726571756972655265636570746064820152750d2dedc82c6d640d8cadccee8d040dad2e6dac2e8c6d60531b608482015260a4016106b2565b60005b8551811015610fb257610fa033878381518110610f2b57610f2b614bf3565b6020026020010151878481518110610f4557610f45614bf3565b6020026020010151878581518110610f5f57610f5f614bf3565b6020026020010151878681518110610f7957610f79614bf3565b6020026020010151878781518110610f9357610f93614bf3565b6020026020010151612250565b80610faa81614c09565b915050610f0c565b50336001600160a01b03167fd5865ae34f92a2d6a803fa13140b8165046f54e61e68560b26950c62a668c6b68686868686604051610ff4959493929190614c77565b60405180910390a25050505050565b60008051602061504283398151915261101c8133611d4c565b610c1861233c565b60006107f08242612394565b600082815260fb602052604081206109209083612485565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61107e816000611a42565b610c1881612491565b60606036805461086790614b61565b60655460ff16156110b95760405162461bcd60e51b81526004016106b290614b9b565b6000805160206150228339815191526110d28133611d4c565b87861461113c5760405162461bcd60e51b815260206004820152603260248201527f6c4e4f52493a2066726f6d4163636f756e747320616e6420746f4163636f756e6044820152710e8e640d8cadccee8d040dad2e6dac2e8c6d60731b60648201526084016106b2565b8584146111a15760405162461bcd60e51b815260206004820152602d60248201527f6c4e4f52493a20746f4163636f756e747320616e6420617454696d6573206c6560448201526c0dccee8d040dad2e6dac2e8c6d609b1b60648201526084016106b2565b8382146112035760405162461bcd60e51b815260206004820152602a60248201527f6c4e4f52493a20617454696d657320616e6420616d6f756e7473206c656e67746044820152690d040dad2e6dac2e8c6d60b31b60648201526084016106b2565b60005b888110156107bf576112968a8a8381811061122357611223614bf3565b905060200201602081019061123891906141fb565b89898481811061124a5761124a614bf3565b905060200201602081019061125f91906141fb565b88888581811061127157611271614bf3565b9050602002013587878681811061128a5761128a614bf3565b905060200201356125ae565b806112a081614c09565b915050611206565b60405162461bcd60e51b81526020600482015260146024820152731b1393d4924e881cd95b9908191a5cd8589b195960621b60448201526064016106b2565b6001600160a01b038116600090815261015f60205260408120600c810154600e8201546109209190614d0c565b60606000826001600160401b0381111561133057611330614321565b60405190808252806020026020018201604052801561136957816020015b611356613e60565b81526020019060019003908161134e5790505b50905060005b838110156113d1576113a185858381811061138c5761138c614bf3565b905060200201602081019061057291906141fb565b8282815181106113b3576113b3614bf3565b602002602001018190525080806113c990614c09565b91505061136f565b509392505050565b60405162461bcd60e51b815260206004820152601860248201527f6c4e4f52493a207472616e736665722064697361626c6564000000000000000060448201526000906064016106b2565b61142c613e60565b506001600160a01b0316600081815261015f60209081526040808320815161020081018352600c82015481528084019590955260068101548583015260018082015460608701526007820154608087015284805260098201808552838620805460a0890152828752818652848720805460c08a01528780526003850180885286892085015460e08b01528489528752948720830154610100890152820154610120880152948190529390925290910154610140830152600d810154610160830152600e81015461018083015260108101546101a083015260118101546101c0830152600f015460ff1615156101e082015290565b600054610100900460ff1661153b5760005460ff161561153f565b303b155b6115a25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106b2565b600054610100900460ff161580156115c4576000805461ffff19166101011790555b6040805160018082528183019092526000916020808301908036833701905050905033816000815181106115fa576115fa614bf3565b60200260200101906001600160a01b031690816001600160a01b031681525050611622612967565b61162a612967565b611632612967565b61163a612967565b611642612990565b61164a6129c3565b6116956040518060400160405280600b81526020016a4c6f636b6564204e4f524960a81b815250604051806040016040528060058152602001646c4e4f524960d81b81525083612a0d565b61016080546001600160a01b0319166001600160a01b0385161790556040516329965a1d60e01b815230600482018190527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b15801561172a57600080fd5b505af115801561173e573d6000803e3d6000fd5b5050505061176060008051602061502283398151915261175b3390565b612195565b508015610bf3576000805461ff00191690555050565b600081815260fb602052604081206107f090612bf7565b600082815260c960205260409020600101546117a98133611d4c565b610b7483836121a9565b6000816001600160a01b0316836001600160a01b0316148061181e57506001600160a01b03831660009081526038602052604090205460ff16801561181e57506001600160a01b038083166000908152603a602090815260408083209387168352929052205460ff16155b806109205750506001600160a01b0390811660009081526039602090815260408083209490931682529290925290205460ff1690565b61185f816000611a42565b610c1881612c01565b60405162461bcd60e51b815260206004820152601c60248201527f6c4e4f52493a206275726e696e67206e6f7420737570706f727465640000000060448201526064016106b2565b6000806118bf85870187614d23565b60208101519091501561190c5761190c8787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611db092505050565b80516001600160a01b0316600090815261015f60205260409020600f015460ff166119875760405162461bcd60e51b815260206004820152602560248201527f6c4e4f52493a2043616e6e6f74206465706f73697420776974686f757420612060448201526419dc985b9d60da1b60648201526084016106b2565b611a0081600001518888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a9150899081908401838280828437600092019190915250612d1c92505050565b5060019695505050505050565b60006001600160e01b03198216637965db0b60e01b14806107f057506301ffc9a760e01b6001600160e01b03198316146107f0565b60405162461bcd60e51b815260206004820181905260248201527f6c4e4f52493a206f70657261746f7220616374696f6e732064697361626c656460448201526064016106b2565b600033611a98818585612d30565b5060019392505050565b6001600160a01b038216600081815261015f602052604080822090516370a0823160e01b815260048101939093529091829030906370a0823190602401602060405180830381865afa158015611afc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b209190614d7a565b600f83015490915060ff1615611b8257611b3985612e57565b15611b6b57600d820154611b5a611b508487612e88565b84600c0154612ea8565b611b649190614d0c565b9050611b82565b81600d015482600c0154611b7f9190614d0c565b90505b949350505050565b6001600160a01b038416611beb5760405162461bcd60e51b815260206004820152602260248201527f4552433737373a206275726e2066726f6d20746865207a65726f206164647265604482015261737360f01b60648201526084016106b2565b33611bfb81866000878787612ebe565b611c088186600087612fe5565b6001600160a01b03851660009081526033602052604090205484811015611c7d5760405162461bcd60e51b815260206004820152602360248201527f4552433737373a206275726e20616d6f756e7420657863656564732062616c616044820152626e636560e81b60648201526084016106b2565b6001600160a01b0386166000908152603360205260408120868303905560348054879290611cac908490614d0c565b92505081905550856001600160a01b0316826001600160a01b03167fa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a4098878787604051611cfa93929190614d93565b60405180910390a36040518581526000906001600160a01b038816907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a3505050505050565b611d568282611048565b610bf357611d6e816001600160a01b03166014613125565b611d79836020613125565b604051602001611d8a929190614dbe565b60408051601f198184030181529082905262461bcd60e51b82526106b2916004016141bc565b600081806020019051810190611dc69190614e43565b80519091506001600160a01b0316611e305760405162461bcd60e51b815260206004820152602760248201527f6c4e4f52493a20526563697069656e742063616e6e6f74206265207a65726f206044820152666164647265737360c81b60648201526084016106b2565b611e4c6000805160206150228339815191528260000151611048565b15611ea85760405162461bcd60e51b815260206004820152602660248201527f6c4e4f52493a20526563697069656e742063616e6e6f74206265206772616e746044820152651030b236b4b760d11b60648201526084016106b2565b8060600151816020015110611f175760405162461bcd60e51b815260206004820152602f60248201527f6c4e4f52493a20756e6c6f636b456e6454696d652063616e6e6f74206265206260448201526e65666f726520737461727454696d6560881b60648201526084016106b2565b80606001514210611f7d5760405162461bcd60e51b815260206004820152602a60248201527f6c4e4f52493a20756e6c6f636b456e6454696d652063616e6e6f7420626520696044820152691b881d1a19481c185cdd60b21b60648201526084016106b2565b80516001600160a01b0316600090815261015f60205260409020600f015460ff1615611feb5760405162461bcd60e51b815260206004820152601b60248201527f6c4e4f52493a204772616e7420616c726561647920657869737473000000000060448201526064016106b2565b80516001600160a01b0316600090815261015f6020908152604091829020600c8101869055600e8101869055600f8101805460ff191660011790559083015191830151909110156120e5578161010001518260c0015110158061205757508161012001518260e0015110155b6120a35760405162461bcd60e51b815260206004820181905260248201527f6c4e4f52493a20756e6c6f636b20636c696666203e207665737420636c69666660448201526064016106b2565b600281018490556020820151815560408201516001820155608082015160c08301516120d09183916132c0565b60a082015160e08301516120e59183916132c0565b600881018490556020820151600682019081556060830151600783015560808301516101008401516121189291906132c0565b60a08201516101208301516121319160068401916132c0565b81602001518483600001516001600160a01b03167f17161516b6ce34594617177a800b150a86ddee02c06993a73ef000a02367d11985604001518660600151604051612187929190918252602082015260400190565b60405180910390a450505050565b61219f82826134f4565b610bf3828261359c565b6121b382826134f4565b610bf382826135be565b60655460ff166122065760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106b2565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0386166122b15760405162461bcd60e51b815260206004820152602260248201527f4552433737373a2073656e642066726f6d20746865207a65726f206164647265604482015261737360f01b60648201526084016106b2565b6001600160a01b0385166123075760405162461bcd60e51b815260206004820181905260248201527f4552433737373a2073656e6420746f20746865207a65726f206164647265737360448201526064016106b2565b33612316818888888888612ebe565b6123248188888888886135e0565b61233381888888888888613752565b50505050505050565b60655460ff161561235f5760405162461bcd60e51b81526004016106b290614b9b565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586122333390565b6001600160a01b038216600081815261015f602052604080822090516370a0823160e01b815260048101939093529091829030906370a0823190602401602060405180830381865afa1580156123ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124129190614d7a565b9050600061241f86612e57565b61242d5782600c0154612437565b6124378386612e88565b600f84015490915060ff161561247c57600d83015461246f61246583612460600688018a612e88565b612ea8565b85600c0154612ea8565b6124799190614d0c565b91505b50949350505050565b60006109208383613917565b6001600160a01b03811633036124f55760405162461bcd60e51b8152602060048201526024808201527f4552433737373a20617574686f72697a696e672073656c66206173206f70657260448201526330ba37b960e11b60648201526084016106b2565b6001600160a01b03811660009081526038602052604090205460ff161561254657336000908152603a602090815260408083206001600160a01b03851684529091529020805460ff19169055612575565b3360009081526039602090815260408083206001600160a01b03851684529091529020805460ff191660011790555b60405133906001600160a01b038316907ff4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f990600090a350565b811580156125bc5750600081115b806125d057506000821180156125d0575080155b6126425760405162461bcd60e51b815260206004820152603b60248201527f6c4e4f52493a204d75737420737065636966792061207265766f636174696f6e60448201527f2074696d65206f7220616e20616d6f756e74206e6f7420626f7468000000000060648201526084016106b2565b6001600160a01b038416600090815261015f60205260409020600f81015460ff166126a85760405162461bcd60e51b81526020600482015260166024820152756c4e4f52493a206e6f206772616e742065786973747360501b60448201526064016106b2565b6126b185612e57565b61270f5760405162461bcd60e51b815260206004820152602960248201527f6c4e4f52493a206e6f2076657374696e67207363686564756c6520666f7220746044820152681a1a5cc819dc985b9d60ba1b60648201526084016106b2565b60008315801561271f5750600083115b612729578361272b565b425b90504281101561278d5760405162461bcd60e51b815260206004820152602760248201527f6c4e4f52493a205265766f636174696f6e2063616e6e6f7420626520696e20746044820152661a19481c185cdd60ca1b60648201526084016106b2565b60006127998383612e88565b905082600c015481106127ee5760405162461bcd60e51b815260206004820152601c60248201527f6c4e4f52493a20746f6b656e7320616c7265616479207665737465640000000060448201526064016106b2565b60008184600c01546128009190614d0c565b905060008515612861578186111561285a5760405162461bcd60e51b815260206004820152601e60248201527f6c4e4f52493a20746f6f2066657720756e76657374656420746f6b656e73000060448201526064016106b2565b5084612864565b50805b8085600c01546128749190614d0c565b600c86015560108501849055601185018190556040805160208082018352600080835283519182019093529182526128af918b918491611b8a565b61016054604051634decdde360e11b81526001600160a01b038a8116600483015260248201849052606060448301526000606483015290911690639bd9bbc690608401600060405180830381600087803b15801561290c57600080fd5b505af1158015612920573d6000803e3d6000fd5b5050505080896001600160a01b0316857f0bbe3f9ae306d75ae6df08cd4a79ac5c6eae93ffae7d7e52f2859bf27592519d60405160405180910390a4505050505050505050565b600054610100900460ff1661298e5760405162461bcd60e51b81526004016106b290614ed1565b565b600054610100900460ff166129b75760405162461bcd60e51b81526004016106b290614ed1565b6065805460ff19169055565b600054610100900460ff166129ea5760405162461bcd60e51b81526004016106b290614ed1565b6129f5600033612195565b61298e60008051602061504283398151915233612195565b600054610100900460ff16612a345760405162461bcd60e51b81526004016106b290614ed1565b8251612a47906035906020860190613ee8565b508151612a5b906036906020850190613ee8565b508051612a6f906037906020840190613f6c565b5060005b8151811015612ad857600160386000848481518110612a9457612a94614bf3565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580612ad081614c09565b915050612a73565b506040516329965a1d60e01b815230600482018190527fac7fbab5f54a3ca8194167523c6753bfeb96a445279294b6125b68cce217705460248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b158015612b5257600080fd5b505af1158015612b66573d6000803e3d6000fd5b50506040516329965a1d60e01b815230600482018190527faea199e31a596269b42cdafd93407f14436db6e4cad65417994c2eb37381e05a60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad2492506329965a1d9150606401600060405180830381600087803b158015612be357600080fd5b505af1158015612333573d6000803e3d6000fd5b60006107f0825490565b336001600160a01b03821603612c635760405162461bcd60e51b815260206004820152602160248201527f4552433737373a207265766f6b696e672073656c66206173206f70657261746f6044820152603960f91b60648201526084016106b2565b6001600160a01b03811660009081526038602052604090205460ff1615612cb757336000908152603a602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612ce3565b3360009081526039602090815260408083206001600160a01b03851684529091529020805460ff191690555b60405133906001600160a01b038316907f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa190600090a350565b612d2a848484846001613941565b50505050565b6001600160a01b038316612d945760405162461bcd60e51b815260206004820152602560248201527f4552433737373a20617070726f76652066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016106b2565b6001600160a01b038216612df65760405162461bcd60e51b815260206004820152602360248201527f4552433737373a20617070726f766520746f20746865207a65726f206164647260448201526265737360e81b60648201526084016106b2565b6001600160a01b038381166000818152603b602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038116600090815261015f60205260408120600f81015460ff168015610920575054151592915050565b6000612e948383613a87565b612e9e8484613b46565b6109209190614bdb565b6000818310612eb75781610920565b5090919050565b60405163555ddc6560e11b81526001600160a01b03861660048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe8956024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa158015612f3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f639190614f1c565b90506001600160a01b0381161561233357604051633ad5cbc160e11b81526001600160a01b038216906375ab978290612faa908a908a908a908a908a908a90600401614f39565b600060405180830381600087803b158015612fc457600080fd5b505af1158015612fd8573d6000803e3d6000fd5b5050505050505050505050565b6001600160a01b038381161590831615600061300f60008051602061502283398151915288611048565b90506001600160a01b038781169087161415600061302c88611024565b861115905083801561303b5750815b80156130445750825b156130bc5785613069896001600160a01b031660009081526033602052604090205490565b10156130b75760405162461bcd60e51b815260206004820152601b60248201527f6c4e4f52493a20696e73756666696369656e742062616c616e6365000000000060448201526064016106b2565b61310e565b8461310e578061310e5760405162461bcd60e51b815260206004820152601b60248201527f6c4e4f52493a20696e73756666696369656e742062616c616e6365000000000060448201526064016106b2565b61311a89898989613bbc565b505050505050505050565b60606000613134836002614f93565b61313f906002614bdb565b6001600160401b0381111561315657613156614321565b6040519080825280601f01601f191660200182016040528015613180576020820181803683370190505b509050600360fc1b8160008151811061319b5761319b614bf3565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106131ca576131ca614bf3565b60200101906001600160f81b031916908160001a90535060006131ee846002614f93565b6131f9906001614bdb565b90505b6001811115613271576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061322d5761322d614bf3565b1a60f81b82828151811061324357613243614bf3565b60200101906001600160f81b031916908160001a90535060049490941c9361326a81614fb2565b90506131fc565b5083156109205760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106b2565b600483015460008190036133375783548310156133325760405162461bcd60e51b815260206004820152602a60248201527f5363686564756c655574696c733a20436c696666206265666f72652073636865604482015269191d5b19481cdd185c9d60b21b60648201526084016106b2565b6133b9565b600384016000613348600184614d0c565b8152602001908152602001600020600001548310156133b95760405162461bcd60e51b815260206004820152602760248201527f5363686564756c655574696c733a20436c69666673206e6f74206368726f6e6f6044820152661b1bd9da58d85b60ca1b60648201526084016106b2565b83600101548311156134255760405162461bcd60e51b815260206004820152602f60248201527f5363686564756c655574696c733a20436c696666732063616e6e6f7420656e6460448201526e206166746572207363686564756c6560881b60648201526084016106b2565b836002015482856005015461343a9190614bdb565b111561349a5760405162461bcd60e51b815260206004820152602960248201527f5363686564756c655574696c733a20436c69666620616d6f756e747320657863604482015268195959081d1bdd185b60ba1b60648201526084016106b2565b600081815260038501602052604081208481556001808201859055600487018054929391929091906134cd908490614bdb565b92505081905550828560050160008282546134e89190614bdb565b90915550505050505050565b6134fe8282613be4565b6000805160206150228339815191528203610bf3576001600160a01b038116600090815261015f60205260409020600f015460ff1615610bf35760405162461bcd60e51b815260206004820152603360248201527f6c4e4f52493a2043616e6e6f742061737369676e20726f6c6520746f2061206760448201527272616e7420686f6c646572206164647265737360681b60648201526084016106b2565b6135a68282613c07565b600082815260fb60205260409020610b749082613c8d565b6135c88282613ca2565b600082815260fb60205260409020610b749082613d09565b6135ec86868686612fe5565b6001600160a01b038516600090815260336020526040902054838110156136655760405162461bcd60e51b815260206004820152602760248201527f4552433737373a207472616e7366657220616d6f756e7420657863656564732060448201526662616c616e636560c81b60648201526084016106b2565b6001600160a01b0380871660009081526033602052604080822087850390559187168152908120805486929061369c908490614bdb565b92505081905550846001600160a01b0316866001600160a01b0316886001600160a01b03167f06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc826146779878787876040516136f493929190614d93565b60405180910390a4846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405161374191815260200190565b60405180910390a350505050505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b6024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa1580156137d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137f79190614f1c565b90506001600160a01b03811615613873576040516223de2960e01b81526001600160a01b038216906223de299061383c908b908b908b908b908b908b90600401614f39565b600060405180830381600087803b15801561385657600080fd5b505af115801561386a573d6000803e3d6000fd5b5050505061390d565b811561390d576001600160a01b0386163b1561390d5760405162461bcd60e51b815260206004820152604d60248201527f4552433737373a20746f6b656e20726563697069656e7420636f6e747261637460448201527f20686173206e6f20696d706c656d656e74657220666f7220455243373737546f60648201526c1ad95b9cd49958da5c1a595b9d609a1b608482015260a4016106b2565b5050505050505050565b600082600001828154811061392e5761392e614bf3565b9060005260206000200154905092915050565b6001600160a01b0385166139975760405162461bcd60e51b815260206004820181905260248201527f4552433737373a206d696e7420746f20746865207a65726f206164647265737360448201526064016106b2565b336139a58160008888612fe5565b84603460008282546139b79190614bdb565b90915550506001600160a01b038616600090815260336020526040812080548792906139e4908490614bdb565b909155506139fa90508160008888888888613752565b856001600160a01b0316816001600160a01b03167f2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d878787604051613a4193929190614d93565b60405180910390a36040518581526001600160a01b038716906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611d3c565b6000808360050154846002015410613ab05783600501548460020154613aad9190614d0c565b90505b83600101548310613ac25790506107f0565b8354600485015415613afa5784600301600060018760040154613ae59190614d0c565b81526020019081526020016000206000015490505b6000818660010154613b0c9190614d0c565b9050818510613b395780613b208387614d0c565b613b2a9085614f93565b613b349190614fc9565b613b3c565b60005b9695505050505050565b60048201546000908190815b81811015613ba45760008181526003870160205260409020548510613b92576000818152600387016020526040902060010154613b8f9084614bdb565b92505b80613b9c81614c09565b915050613b52565b50613bb3856002015483612ea8565b95945050505050565b60655460ff1615613bdf5760405162461bcd60e51b81526004016106b290614b9b565b612d2a565b60655460ff1615610bf35760405162461bcd60e51b81526004016106b290614b9b565b613c118282611048565b610bf357600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff19166001179055613c493390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610920836001600160a01b038416613d1e565b613cac8282611048565b15610bf357600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610920836001600160a01b038416613d6d565b6000818152600183016020526040812054613d65575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107f0565b5060006107f0565b60008181526001830160205260408120548015613e56576000613d91600183614d0c565b8554909150600090613da590600190614d0c565b9050818114613e0a576000866000018281548110613dc557613dc5614bf3565b9060005260206000200154905080876000018481548110613de857613de8614bf3565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613e1b57613e1b614feb565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506107f0565b60009150506107f0565b6040518061020001604052806000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b828054613ef490614b61565b90600052602060002090601f016020900481019282613f165760008555613f5c565b82601f10613f2f57805160ff1916838001178555613f5c565b82800160010185558215613f5c579182015b82811115613f5c578251825591602001919060010190613f41565b50613f68929150613fc1565b5090565b828054828255906000526020600020908101928215613f5c579160200282015b82811115613f5c57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613f8c565b5b80821115613f685760008155600101613fc2565b6001600160a01b0381168114610c1857600080fd5b60008083601f840112613ffd57600080fd5b5081356001600160401b0381111561401457600080fd5b60208301915083602082850101111561402c57600080fd5b9250929050565b60008060008060008060008060c0898b03121561404f57600080fd5b883561405a81613fd6565b9750602089013561406a81613fd6565b9650604089013561407a81613fd6565b95506060890135945060808901356001600160401b038082111561409d57600080fd5b6140a98c838d01613feb565b909650945060a08b01359150808211156140c257600080fd5b506140cf8b828c01613feb565b999c989b5096995094979396929594505050565b6000602082840312156140f557600080fd5b81356001600160e01b03198116811461092057600080fd5b600081518084526020808501945080840160005b838110156141465781516001600160a01b031687529582019590820190600101614121565b509495945050505050565b602081526000610920602083018461410d565b60005b8381101561417f578181015183820152602001614167565b83811115612d2a5750506000910152565b600081518084526141a8816020860160208601614164565b601f01601f19169290920160200192915050565b6020815260006109206020830184614190565b600080604083850312156141e257600080fd5b82356141ed81613fd6565b946020939093013593505050565b60006020828403121561420d57600080fd5b813561092081613fd6565b60008060006060848603121561422d57600080fd5b833561423881613fd6565b9250602084013561424881613fd6565b929592945050506040919091013590565b60006020828403121561426b57600080fd5b5035919050565b60008060008060008060008060008060006101608c8e03121561429457600080fd5b8b359a5060208c01356142a681613fd6565b9a9d9a9c505050506040890135986060810135986080820135985060a0820135975060c0820135965060e0820135955061010082013594506101208201359350610140909101359150565b6000806040838503121561430457600080fd5b82359150602083013561431681613fd6565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b038111828210171561435a5761435a614321565b60405290565b604051601f8201601f191681016001600160401b038111828210171561438857614388614321565b604052919050565b60006001600160401b038211156143a9576143a9614321565b5060051b60200190565b600082601f8301126143c457600080fd5b813560206143d96143d483614390565b614360565b82815260059290921b840181019181810190868411156143f857600080fd5b8286015b8481101561441c57803561440f81613fd6565b83529183019183016143fc565b509695505050505050565b60006020828403121561443957600080fd5b81356001600160401b0381111561444f57600080fd5b611b82848285016143b3565b600081518084526020808501945080840160005b838110156141465781518752958201959082019060010161446f565b602081526000610920602083018461445b565b600082601f8301126144af57600080fd5b81356001600160401b038111156144c8576144c8614321565b6144db601f8201601f1916602001614360565b8181528460208386010111156144f057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561452557600080fd5b853561453081613fd6565b9450602086013561454081613fd6565b93506040860135925060608601356001600160401b038082111561456357600080fd5b61456f89838a0161449e565b9350608088013591508082111561458557600080fd5b506145928882890161449e565b9150509295509295909350565b600082601f8301126145b057600080fd5b813560206145c06143d483614390565b82815260059290921b840181019181810190868411156145df57600080fd5b8286015b8481101561441c57803583529183019183016145e3565b600082601f83011261460b57600080fd5b8135602061461b6143d483614390565b82815260059290921b8401810191818101908684111561463a57600080fd5b8286015b8481101561441c5780356001600160401b0381111561465d5760008081fd5b61466b8986838b010161449e565b84525091830191830161463e565b600082601f83011261468a57600080fd5b8135602061469a6143d483614390565b82815260059290921b840181019181810190868411156146b957600080fd5b8286015b8481101561441c57803580151581146146d65760008081fd5b83529183019183016146bd565b600080600080600060a086880312156146fb57600080fd5b85356001600160401b038082111561471257600080fd5b61471e89838a016143b3565b9650602088013591508082111561473457600080fd5b61474089838a0161459f565b9550604088013591508082111561475657600080fd5b61476289838a016145fa565b9450606088013591508082111561477857600080fd5b61478489838a016145fa565b9350608088013591508082111561479a57600080fd5b5061459288828901614679565b600080604083850312156147ba57600080fd5b50508035926020909101359150565b60008083601f8401126147db57600080fd5b5081356001600160401b038111156147f257600080fd5b6020830191508360208260051b850101111561402c57600080fd5b6000806000806000806000806080898b03121561482957600080fd5b88356001600160401b038082111561484057600080fd5b61484c8c838d016147c9565b909a50985060208b013591508082111561486557600080fd5b6148718c838d016147c9565b909850965060408b013591508082111561488a57600080fd5b6148968c838d016147c9565b909650945060608b01359150808211156148af57600080fd5b506140cf8b828c016147c9565b6000806000606084860312156148d157600080fd5b83356148dc81613fd6565b92506020840135915060408401356001600160401b038111156148fe57600080fd5b61490a8682870161449e565b9150509250925092565b6000806020838503121561492757600080fd5b82356001600160401b0381111561493d57600080fd5b614949858286016147c9565b90969095509350505050565b80518252602081015161497360208401826001600160a01b03169052565b5060408181015190830152606080820151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a080820151908301526101c080820151908301526101e08082015180151582850152612d2a565b6020808252825182820181905260009190848201906040850190845b81811015614a5357614a3f838551614955565b928401926102009290920191600101614a2c565b50909695505050505050565b61020081016107f08284614955565b60008060408385031215614a8157600080fd5b8235614a8c81613fd6565b9150602083013561431681613fd6565b60008060008060808587031215614ab257600080fd5b8435614abd81613fd6565b93506020850135925060408501356001600160401b0380821115614ae057600080fd5b614aec8883890161449e565b93506060870135915080821115614b0257600080fd5b50614b0f8782880161449e565b91505092959194509250565b60008060408385031215614b2e57600080fd5b8235915060208301356001600160401b03811115614b4b57600080fd5b614b578582860161449e565b9150509250929050565b600181811c90821680614b7557607f821691505b602082108103614b9557634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115614bee57614bee614bc5565b500190565b634e487b7160e01b600052603260045260246000fd5b600060018201614c1b57614c1b614bc5565b5060010190565b600081518084526020808501808196508360051b8101915082860160005b85811015614c6a578284038952614c58848351614190565b98850198935090840190600101614c40565b5091979650505050505050565b60a081526000614c8a60a083018861410d565b602083820381850152614c9d828961445b565b91508382036040850152614cb18288614c22565b91508382036060850152614cc58287614c22565b8481036080860152855180825282870193509082019060005b81811015614cfc578451151583529383019391830191600101614cde565b50909a9950505050505050505050565b600082821015614d1e57614d1e614bc5565b500390565b600060408284031215614d3557600080fd5b604051604081018181106001600160401b0382111715614d5757614d57614321565b6040528235614d6581613fd6565b81526020928301359281019290925250919050565b600060208284031215614d8c57600080fd5b5051919050565b838152606060208201526000614dac6060830185614190565b8281036040840152613b3c8185614190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614df6816017850160208801614164565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614e27816028840160208801614164565b01602801949350505050565b8051614e3e81613fd6565b919050565b60006101408284031215614e5657600080fd5b614e5e614337565b614e6783614e33565b81526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152508091505092915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215614f2e57600080fd5b815161092081613fd6565b6001600160a01b0387811682528681166020830152851660408201526060810184905260c060808201819052600090614f7490830185614190565b82810360a0840152614f868185614190565b9998505050505050505050565b6000816000190483118215151615614fad57614fad614bc5565b500290565b600081614fc157614fc1614bc5565b506000190190565b600082614fe657634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603160045260246000fdfe4552433737375072657365745061757361626c655065726d697373696f6e6564a52f07bb8dc8df886598eb50edeaba2b8e45715237ed244354b60ea04d0390b865d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa26469706673582212205875699fe59728351a72546aac76c4af76dabb440c090412ecff6f41c62c3fa464736f6c634300080d0033","abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenHolder","type":"address"}],"name":"AuthorizedOperator","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"operatorData","type":"bytes"}],"name":"Burned","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"operatorData","type":"bytes"}],"name":"Minted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"tokenHolder","type":"address"}],"name":"RevokedOperator","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"operatorData","type":"bytes"}],"name":"Sent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"address[]","name":"recipients","type":"address[]"},{"indexed":false,"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"indexed":false,"internalType":"bytes[]","name":"userData","type":"bytes[]"},{"indexed":false,"internalType":"bytes[]","name":"operatorData","type":"bytes[]"},{"indexed":false,"internalType":"bool[]","name":"requireReceptionAck","type":"bool[]"}],"name":"SentBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"startTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"vestEndTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"unlockEndTime","type":"uint256"}],"name":"TokenGrantCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"quantity","type":"uint256"}],"name":"TokensClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"atTime","type":"uint256"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"uint256","name":"quantity","type":"uint256"}],"name":"UnvestedTokensRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ERC777_TOKENS_RECIPIENT_HASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAUSER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_GRANTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"holder","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"authorizeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenHolder","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"}],"name":"batchGetGrant","outputs":[{"components":[{"internalType":"uint256","name":"grantAmount","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"vestEndTime","type":"uint256"},{"internalType":"uint256","name":"unlockEndTime","type":"uint256"},{"internalType":"uint256","name":"cliff1Time","type":"uint256"},{"internalType":"uint256","name":"cliff2Time","type":"uint256"},{"internalType":"uint256","name":"vestCliff1Amount","type":"uint256"},{"internalType":"uint256","name":"vestCliff2Amount","type":"uint256"},{"internalType":"uint256","name":"unlockCliff1Amount","type":"uint256"},{"internalType":"uint256","name":"unlockCliff2Amount","type":"uint256"},{"internalType":"uint256","name":"claimedAmount","type":"uint256"},{"internalType":"uint256","name":"originalAmount","type":"uint256"},{"internalType":"uint256","name":"lastRevocationTime","type":"uint256"},{"internalType":"uint256","name":"lastQuantityRevoked","type":"uint256"},{"internalType":"bool","name":"exists","type":"bool"}],"internalType":"struct LockedNORI.TokenGrantDetail[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"fromAccounts","type":"address[]"},{"internalType":"address[]","name":"toAccounts","type":"address[]"},{"internalType":"uint256[]","name":"atTimes","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"batchRevokeUnvestedTokenAmounts","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes[]","name":"userData","type":"bytes[]"},{"internalType":"bytes[]","name":"operatorData","type":"bytes[]"},{"internalType":"bool[]","name":"requireReceptionAck","type":"bool[]"}],"name":"batchSend","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"burn","outputs":[],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"vestEndTime","type":"uint256"},{"internalType":"uint256","name":"unlockEndTime","type":"uint256"},{"internalType":"uint256","name":"cliff1Time","type":"uint256"},{"internalType":"uint256","name":"cliff2Time","type":"uint256"},{"internalType":"uint256","name":"vestCliff1Amount","type":"uint256"},{"internalType":"uint256","name":"vestCliff2Amount","type":"uint256"},{"internalType":"uint256","name":"unlockCliff1Amount","type":"uint256"},{"internalType":"uint256","name":"unlockCliff2Amount","type":"uint256"}],"name":"createGrant","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"defaultOperators","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getGrant","outputs":[{"components":[{"internalType":"uint256","name":"grantAmount","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"vestEndTime","type":"uint256"},{"internalType":"uint256","name":"unlockEndTime","type":"uint256"},{"internalType":"uint256","name":"cliff1Time","type":"uint256"},{"internalType":"uint256","name":"cliff2Time","type":"uint256"},{"internalType":"uint256","name":"vestCliff1Amount","type":"uint256"},{"internalType":"uint256","name":"vestCliff2Amount","type":"uint256"},{"internalType":"uint256","name":"unlockCliff1Amount","type":"uint256"},{"internalType":"uint256","name":"unlockCliff2Amount","type":"uint256"},{"internalType":"uint256","name":"claimedAmount","type":"uint256"},{"internalType":"uint256","name":"originalAmount","type":"uint256"},{"internalType":"uint256","name":"lastRevocationTime","type":"uint256"},{"internalType":"uint256","name":"lastQuantityRevoked","type":"uint256"},{"internalType":"bool","name":"exists","type":"bool"}],"internalType":"struct LockedNORI.TokenGrantDetail","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"granularity","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract BridgedPolygonNORI","name":"bridgedPolygonNoriAddress","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"tokenHolder","type":"address"}],"name":"isOperatorFor","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"operatorBurn","outputs":[],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"operatorSend","outputs":[],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"quantityRevokedFrom","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"revokeOperator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"send","outputs":[],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"},{"internalType":"bytes","name":"operatorData","type":"bytes"}],"name":"tokensReceived","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"unlockedBalanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"vestedBalanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawTo","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]}